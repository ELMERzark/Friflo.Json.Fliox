// Generated by: https://github.com/friflo/Friflo.Json.Fliox#schema
using Friflo.Json.Fliox.Mapper.Map;
using Friflo.Json.Fliox.Hub.DB.Cluster;

// ReSharper disable InconsistentNaming
namespace Gen.Friflo.Json.Fliox.Hub.DB.Cluster
{
    static class Gen_ModelFiles
    {
        private const int Gen_db = 0;
        private const int Gen_schemaName = 1;
        private const int Gen_type = 2;
        private const int Gen_label = 3;
        private const int Gen_files = 4;

        private static bool ReadField (ref ModelFiles obj, PropField field, ref Reader reader) {
            bool success;
            switch (field.genIndex) {
                case Gen_db:         obj.db         = reader.ReadString (field, obj.db,         out success);  return success;
                case Gen_schemaName: obj.schemaName = reader.ReadString (field, obj.schemaName, out success);  return success;
                case Gen_type:       obj.type       = reader.ReadString (field, obj.type,       out success);  return success;
                case Gen_label:      obj.label      = reader.ReadString (field, obj.label,      out success);  return success;
                case Gen_files:      obj.files      = reader.ReadClass (field, obj.files,      out success);  return success;
            }
            return false;
        }

        private static void Write(ref ModelFiles obj, PropField[] fields, ref Writer writer, ref bool firstMember) {
            writer.WriteString (fields[Gen_db],         obj.db,         ref firstMember);
            writer.WriteString (fields[Gen_schemaName], obj.schemaName, ref firstMember);
            writer.WriteString (fields[Gen_type],       obj.type,       ref firstMember);
            writer.WriteString (fields[Gen_label],      obj.label,      ref firstMember);
            writer.WriteClass (fields[Gen_files],      obj.files,      ref firstMember);
        }
    }
}

