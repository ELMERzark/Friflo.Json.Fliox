// Generated by: https://github.com/friflo/Friflo.Json.Fliox#schema
using Friflo.Json.Fliox.Mapper.Map;
using Friflo.Json.Tests.Common.UnitTest.Fliox.Client;

// ReSharper disable InconsistentNaming
namespace Gen.Friflo.Json.Tests.Common.UnitTest.Fliox.Client
{
    static class Gen_TestType
    {
        private const int Gen_id = 0;
        private const int Gen_dateTime = 1;
        private const int Gen_dateTimeNull = 2;
        private const int Gen_bigInt = 3;
        private const int Gen_bigIntNull = 4;
        private const int Gen_boolean = 5;
        private const int Gen_booleanNull = 6;
        private const int Gen_uint8 = 7;
        private const int Gen_uint8Null = 8;
        private const int Gen_int16 = 9;
        private const int Gen_int16Null = 10;
        private const int Gen_int32 = 11;
        private const int Gen_int32Null = 12;
        private const int Gen_int64 = 13;
        private const int Gen_int64Null = 14;
        private const int Gen_float32 = 15;
        private const int Gen_float32Null = 16;
        private const int Gen_float64 = 17;
        private const int Gen_float64Null = 18;
        private const int Gen_pocStruct = 19;
        private const int Gen_pocStructNull = 20;
        private const int Gen_intArray = 21;
        private const int Gen_intArrayNull = 22;
        private const int Gen_intNullArray = 23;
        private const int Gen_jsonValue = 24;
        private const int Gen_derivedClass = 25;
        private const int Gen_derivedClassNull = 26;
        private const int Gen_testEnum = 27;
        private const int Gen_testEnumNull = 28;

        private static bool ReadField (ref TestType obj, PropField field, ref Reader reader) {
            bool success;
            switch (field.genIndex) {
                case Gen_id:               obj.id               = reader.ReadString      (field, obj.id,               out success);  return success;
                case Gen_dateTime:         obj.dateTime         = reader.ReadStruct      (field, obj.dateTime,         out success);  return success;
                case Gen_dateTimeNull:     obj.dateTimeNull     = reader.ReadStructNull  (field, obj.dateTimeNull,     out success);  return success;
                case Gen_bigInt:           obj.bigInt           = reader.ReadStruct      (field, obj.bigInt,           out success);  return success;
                case Gen_bigIntNull:       obj.bigIntNull       = reader.ReadStructNull  (field, obj.bigIntNull,       out success);  return success;
                case Gen_boolean:          obj.boolean          = reader.ReadBoolean     (field, out success);  return success;
                case Gen_booleanNull:      obj.booleanNull      = reader.ReadBooleanNull (field, out success);  return success;
                case Gen_uint8:            obj.uint8            = reader.ReadByte        (field, out success);  return success;
                case Gen_uint8Null:        obj.uint8Null        = reader.ReadByteNull    (field, out success);  return success;
                case Gen_int16:            obj.int16            = reader.ReadInt16       (field, out success);  return success;
                case Gen_int16Null:        obj.int16Null        = reader.ReadInt16Null   (field, out success);  return success;
                case Gen_int32:            obj.int32            = reader.ReadInt32       (field, out success);  return success;
                case Gen_int32Null:        obj.int32Null        = reader.ReadInt32Null   (field, out success);  return success;
                case Gen_int64:            obj.int64            = reader.ReadInt64       (field, out success);  return success;
                case Gen_int64Null:        obj.int64Null        = reader.ReadInt64Null   (field, out success);  return success;
                case Gen_float32:          obj.float32          = reader.ReadSingle      (field, out success);  return success;
                case Gen_float32Null:      obj.float32Null      = reader.ReadSingleNull  (field, out success);  return success;
                case Gen_float64:          obj.float64          = reader.ReadDouble      (field, out success);  return success;
                case Gen_float64Null:      obj.float64Null      = reader.ReadDoubleNull  (field, out success);  return success;
                case Gen_pocStruct:        obj.pocStruct        = reader.ReadStruct      (field, obj.pocStruct,        out success);  return success;
                case Gen_pocStructNull:    obj.pocStructNull    = reader.ReadStructNull  (field, obj.pocStructNull,    out success);  return success;
                case Gen_intArray:         obj.intArray         = reader.ReadClass       (field, obj.intArray,         out success);  return success;
                case Gen_intArrayNull:     obj.intArrayNull     = reader.ReadClass       (field, obj.intArrayNull,     out success);  return success;
                case Gen_intNullArray:     obj.intNullArray     = reader.ReadClass       (field, obj.intNullArray,     out success);  return success;
                case Gen_jsonValue:        obj.jsonValue        = reader.ReadJsonValue   (field, out success);  return success;
                case Gen_derivedClass:     obj.derivedClass     = reader.ReadClass       (field, obj.derivedClass,     out success);  return success;
                case Gen_derivedClassNull: obj.derivedClassNull = reader.ReadClass       (field, obj.derivedClassNull, out success);  return success;
                case Gen_testEnum:         obj.testEnum         = reader.ReadEnum        (field, obj.testEnum,         out success);  return success;
                case Gen_testEnumNull:     obj.testEnumNull     = reader.ReadEnumNull    (field, obj.testEnumNull,     out success);  return success;
            }
            return false;
        }

        private static void Write(ref TestType obj, PropField[] fields, ref Writer writer, ref bool firstMember) {
            writer.WriteString      (fields[Gen_id],               obj.id,               ref firstMember);
            writer.WriteStruct      (fields[Gen_dateTime],         obj.dateTime,         ref firstMember);
            writer.WriteStructNull  (fields[Gen_dateTimeNull],     obj.dateTimeNull,     ref firstMember);
            writer.WriteStruct      (fields[Gen_bigInt],           obj.bigInt,           ref firstMember);
            writer.WriteStructNull  (fields[Gen_bigIntNull],       obj.bigIntNull,       ref firstMember);
            writer.WriteBoolean     (fields[Gen_boolean],          obj.boolean,          ref firstMember);
            writer.WriteBooleanNull (fields[Gen_booleanNull],      obj.booleanNull,      ref firstMember);
            writer.WriteByte        (fields[Gen_uint8],            obj.uint8,            ref firstMember);
            writer.WriteByteNull    (fields[Gen_uint8Null],        obj.uint8Null,        ref firstMember);
            writer.WriteInt16       (fields[Gen_int16],            obj.int16,            ref firstMember);
            writer.WriteInt16Null   (fields[Gen_int16Null],        obj.int16Null,        ref firstMember);
            writer.WriteInt32       (fields[Gen_int32],            obj.int32,            ref firstMember);
            writer.WriteInt32Null   (fields[Gen_int32Null],        obj.int32Null,        ref firstMember);
            writer.WriteInt64       (fields[Gen_int64],            obj.int64,            ref firstMember);
            writer.WriteInt64Null   (fields[Gen_int64Null],        obj.int64Null,        ref firstMember);
            writer.WriteSingle      (fields[Gen_float32],          obj.float32,          ref firstMember);
            writer.WriteSingleNull  (fields[Gen_float32Null],      obj.float32Null,      ref firstMember);
            writer.WriteDouble      (fields[Gen_float64],          obj.float64,          ref firstMember);
            writer.WriteDoubleNull  (fields[Gen_float64Null],      obj.float64Null,      ref firstMember);
            writer.WriteStruct      (fields[Gen_pocStruct],        obj.pocStruct,        ref firstMember);
            writer.WriteStructNull  (fields[Gen_pocStructNull],    obj.pocStructNull,    ref firstMember);
            writer.WriteClass       (fields[Gen_intArray],         obj.intArray,         ref firstMember);
            writer.WriteClass       (fields[Gen_intArrayNull],     obj.intArrayNull,     ref firstMember);
            writer.WriteClass       (fields[Gen_intNullArray],     obj.intNullArray,     ref firstMember);
            writer.WriteJsonValue   (fields[Gen_jsonValue],        obj.jsonValue,        ref firstMember);
            writer.WriteClass       (fields[Gen_derivedClass],     obj.derivedClass,     ref firstMember);
            writer.WriteClass       (fields[Gen_derivedClassNull], obj.derivedClassNull, ref firstMember);
            writer.WriteEnum        (fields[Gen_testEnum],         obj.testEnum,         ref firstMember);
            writer.WriteEnumNull    (fields[Gen_testEnumNull],     obj.testEnumNull,     ref firstMember);
        }
    }
}

