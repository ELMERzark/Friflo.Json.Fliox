// Generated by: https://github.com/friflo/Friflo.Json.Fliox#schema
import { int32 } from "./Standard";

/**
 * Specify the **ids** requested by a **ReadEntities** task.  
 * To return entities referenced by fields of the read result use **references**
 */
export class ReadEntitiesSet {
    /** list of entity **ids** requested by a **ReadEntities** task */
    ids         : string[];
    /** used to request the entities referenced by properties of a read task result */
    references? : References[] | null;
}

/** **References** are used to return entities referenced by fields of entities returned by read and query tasks.  **References** can be nested to return referenced entities of referenced entities. */
export class References {
    /** the field path used as a reference to an entity in the specified **container** */
    selector    : string;
    /** the **container** storing the entities referenced by the specified **selector** */
    container   : string;
    keyName?    : string | null;
    isIntKey?   : boolean | null;
    references? : References[] | null;
}

export class ReadEntitiesSetResult {
    references? : ReferencesResult[] | null;
}

export class ReferencesResult {
    error?      : string | null;
    /** container name - not utilized by Protocol */
    container?  : string | null;
    /** number of **ids** - not utilized by Protocol */
    count?      : int32 | null;
    ids         : string[];
    references? : ReferencesResult[] | null;
}

/** Used by **SyncResponse** to return errors when mutating an entity by: create, upsert, patch and delete */
export class EntityError {
    /** error type when accessing an entity in a database */
    type     : EntityErrorType;
    /** error details when accessing an entity */
    message? : string | null;
}

/** Error type when accessing an entity from a database container */
export type EntityErrorType =
    | "Undefined"
    | "ParseError"       /**
       * Invalid JSON when reading an entity from database  
       * can happen with key-value databases - e.g. file-system - as their values are not restricted to JSON
       */
    | "ReadError"        /**
       * Reading an entity from database failed  
       * e.g. a corrupt file when using the file-system as database
       */
    | "WriteError"       /**
       * Writing an entity to database failed  
       * e.g. the file is already in use by another process when using the file-system as database
       */
    | "DeleteError"      /**
       * Deleting an entity in database failed  
       * e.g. the file is already in use by another process when using the file-system as database
       */
    | "PatchError"       /** Patching an entity failed */
;

