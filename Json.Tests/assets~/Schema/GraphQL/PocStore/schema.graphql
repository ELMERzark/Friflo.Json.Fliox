# Generated by: https://github.com/friflo/Friflo.Json.Fliox#schema

# version:        1.0.0
# termsOfService: https://github.com/friflo/Friflo.Json.Fliox
# contactName:    Ullrich Praetz
# contactUrl:     https://github.com/friflo/Friflo.Json.Fliox/issues

scalar String

scalar Int

scalar Float

scalar Boolean

scalar Any

type Query {
    orders           (filter: String, limit: Int) : [Order!]!
    customers        (filter: String, limit: Int) : [Customer!]!
    articles         (filter: String, limit: Int) : [Article!]!
    producers        (filter: String, limit: Int) : [Producer!]!
    employees        (filter: String, limit: Int) : [Employee!]!
    types            (filter: String, limit: Int) : [TestType!]!
    ordersById       (ids: [String!]!) : [Order]!
    customersById    (ids: [String!]!) : [Customer]!
    articlesById     (ids: [String!]!) : [Article]!
    producersById    (ids: [String!]!) : [Producer]!
    employeesById    (ids: [String!]!) : [Employee]!
    typesById        (ids: [String!]!) : [TestType]!
    TestCommand      (param: TestCommandInput) : Boolean!
    SyncCommand      (param: String) : String!
    AsyncCommand     (param: String) : String!
    Command1          : String!
    test_Command2     : String!
    test_CommandHello(param: String) : String!
    std_Echo         (param: Any!) : Any!
    std_Containers    : DbContainers!
    std_Messages      : DbMessages!
    std_Schema        : DbSchema!
    std_Stats        (param: String) : DbStats!
    std_Details       : HostDetails!
    std_Cluster       : HostCluster!
    Message1         (param: String) : Any
    AsyncMessage     (param: String) : Any
    test_Message2    (param: String) : Any
}

type PocStore {
    orders    : Any
    customers : Any
    articles  : Any
    producers : Any
    employees : Any
    types     : Any
}

type Order {
    id       : String!
    customer : String
    created  : String!
    items    : [OrderItem!]
}

input OrderInput {
    id       : String!
    customer : String
    created  : String!
    items    : [OrderItemInput!]
}

type Customer {
    id   : String!
    name : String!
}

input CustomerInput {
    id   : String!
    name : String!
}

type Article {
    id       : String!
    name     : String!
    producer : String
}

input ArticleInput {
    id       : String!
    name     : String!
    producer : String
}

type Producer {
    id        : String!
    name      : String!
    employees : [String!]
}

input ProducerInput {
    id        : String!
    name      : String!
    employees : [String!]
}

type Employee {
    id        : String!
    firstName : String!
    lastName  : String
}

input EmployeeInput {
    id        : String!
    firstName : String!
    lastName  : String
}

type TestType {
    id               : String!
    dateTime         : String!
    dateTimeNull     : String
    bigInt           : String!
    bigIntNull       : String
    boolean          : Boolean!
    booleanNull      : Boolean
    uint8            : Int!
    uint8Null        : Int
    int16            : Int!
    int16Null        : Int
    int32            : Int!
    int32Null        : Int
    int64            : Int!
    int64Null        : Int
    float32          : Float!
    float32Null      : Float
    float64          : Float!
    float64Null      : Float
    pocStruct        : PocStruct!
    pocStructNull    : PocStruct
    intArray         : [Int!]!
    intArrayNull     : [Int!]
    intNullArray     : [Int]
    jsonValue        : Any
    derivedClass     : DerivedClass!
    derivedClassNull : DerivedClass
}

input TestTypeInput {
    id               : String!
    dateTime         : String!
    dateTimeNull     : String
    bigInt           : String!
    bigIntNull       : String
    boolean          : Boolean!
    booleanNull      : Boolean
    uint8            : Int!
    uint8Null        : Int
    int16            : Int!
    int16Null        : Int
    int32            : Int!
    int32Null        : Int
    int64            : Int!
    int64Null        : Int
    float32          : Float!
    float32Null      : Float
    float64          : Float!
    float64Null      : Float
    pocStruct        : PocStructInput!
    pocStructNull    : PocStructInput
    intArray         : [Int!]!
    intArrayNull     : [Int!]
    intNullArray     : [Int]
    jsonValue        : Any
    derivedClass     : DerivedClassInput!
    derivedClassNull : DerivedClassInput
}

type OrderItem {
    article : String!
    amount  : Int!
    name    : String
}

input OrderItemInput {
    article : String!
    amount  : Int!
    name    : String
}

type PocEntity {
    id : String!
}

input PocEntityInput {
    id : String!
}

type PocStruct {
    value : Int!
}

input PocStructInput {
    value : Int!
}

type DerivedClass {
    derivedVal : Int!
    article    : String!
    amount     : Int!
    name       : String
}

input DerivedClassInput {
    derivedVal : Int!
    article    : String!
    amount     : Int!
    name       : String
}

type TestCommand {
    text : String
}

input TestCommandInput {
    text : String
}

type DbContainers {
    id         : String!
    storage    : String!
    containers : [String!]!
}

input DbContainersInput {
    id         : String!
    storage    : String!
    containers : [String!]!
}

type DbMessages {
    id       : String!
    commands : [String!]!
    messages : [String!]!
}

input DbMessagesInput {
    id       : String!
    commands : [String!]!
    messages : [String!]!
}

type DbSchema {
    id          : String!
    schemaName  : String!
    schemaPath  : String!
    jsonSchemas : Any
}

input DbSchemaInput {
    id          : String!
    schemaName  : String!
    schemaPath  : String!
    jsonSchemas : Any
}

type DbStats {
    containers : [ContainerStats!]
}

input DbStatsInput {
    containers : [ContainerStatsInput!]
}

type ContainerStats {
    name  : String!
    count : Int!
}

input ContainerStatsInput {
    name  : String!
    count : Int!
}

type HostDetails {
    version        : String!
    hostName       : String
    projectName    : String
    projectWebsite : String
    envName        : String
    envColor       : String
    routes         : [String!]!
}

input HostDetailsInput {
    version        : String!
    hostName       : String
    projectName    : String
    projectWebsite : String
    envName        : String
    envColor       : String
    routes         : [String!]!
}

type HostCluster {
    databases : [DbContainers!]!
}

input HostClusterInput {
    databases : [DbContainersInput!]!
}

