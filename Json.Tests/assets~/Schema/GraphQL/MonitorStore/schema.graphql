# Generated by: https://github.com/friflo/Friflo.Json.Fliox#schema

scalar String

scalar Int

scalar Float

scalar Boolean

scalar Any

type Query {
    queryHosts    (filter: String, limit: Int, maxCount: Int, cursor: String, selectAll: Boolean) : QueryHostsResult!
    queryUsers    (filter: String, limit: Int, maxCount: Int, cursor: String, selectAll: Boolean) : QueryUsersResult!
    queryClients  (filter: String, limit: Int, maxCount: Int, cursor: String, selectAll: Boolean) : QueryClientsResult!
    queryHistories(filter: String, limit: Int, maxCount: Int, cursor: String, selectAll: Boolean) : QueryHistoriesResult!
    readHosts     (ids: [String!]!, selectAll: Boolean) : [HostHits]!
    readUsers     (ids: [String!]!, selectAll: Boolean) : [UserHits]!
    readClients   (ids: [String!]!, selectAll: Boolean) : [ClientHits]!
    readHistories (ids: [String!]!, selectAll: Boolean) : [HistoryHits]!
    countHosts    (filter: String) : Int
    countUsers    (filter: String) : Int
    countClients  (filter: String) : Int
    countHistories(filter: String) : Int
    ClearStats    (param: ClearStatsInput) : ClearStatsResult!
    std_Echo      (param: Any!) : Any!
    std_Containers : DbContainers!
    std_Messages   : DbMessages!
    std_Schema     : DbSchema!
    std_Stats     (param: String) : DbStats!
    std_Host      (param: HostParamInput) : HostInfo!
    std_Cluster    : HostCluster!
    std_User      (param: UserParamInput) : UserResult!
    std_Client    (param: ClientParamInput) : ClientResult!
}

type QueryHostsResult {
    count  : Int!
    cursor : String
    items  : [HostHits!]!
}

type QueryUsersResult {
    count  : Int!
    cursor : String
    items  : [UserHits!]!
}

type QueryClientsResult {
    count  : Int!
    cursor : String
    items  : [ClientHits!]!
}

type QueryHistoriesResult {
    count  : Int!
    cursor : String
    items  : [HistoryHits!]!
}

type EntityError {
    id      : String!
    type    : String!
    message : String!
}

type Mutation {
    createHosts    (entities: [HostHitsInput!]!) : [EntityError!]
    createUsers    (entities: [UserHitsInput!]!) : [EntityError!]
    createClients  (entities: [ClientHitsInput!]!) : [EntityError!]
    createHistories(entities: [HistoryHitsInput!]!) : [EntityError!]
    upsertHosts    (entities: [HostHitsInput!]!) : [EntityError!]
    upsertUsers    (entities: [UserHitsInput!]!) : [EntityError!]
    upsertClients  (entities: [ClientHitsInput!]!) : [EntityError!]
    upsertHistories(entities: [HistoryHitsInput!]!) : [EntityError!]
    deleteHosts    (ids: [String!]!) : [EntityError!]
    deleteUsers    (ids: [String!]!) : [EntityError!]
    deleteClients  (ids: [String!]!) : [EntityError!]
    deleteHistories(ids: [String!]!) : [EntityError!]
}

type MonitorStore {
    hosts     : Any
    users     : Any
    clients   : Any
    histories : Any
}

type HostHits {
    id     : String!
    counts : RequestCount!
}

input HostHitsInput {
    id     : String!
    counts : RequestCountInput!
}

type UserHits {
    id      : String!
    clients : [String!]!
    counts  : [RequestCount!]
}

input UserHitsInput {
    id      : String!
    clients : [String!]!
    counts  : [RequestCountInput!]
}

type ClientHits {
    id                 : String!
    user               : String!
    counts             : [RequestCount!]
    subscriptionEvents : SubscriptionEvents
}

input ClientHitsInput {
    id                 : String!
    user               : String!
    counts             : [RequestCountInput!]
    subscriptionEvents : SubscriptionEventsInput
}

type HistoryHits {
    id         : Int!
    counters   : [Int!]!
    lastUpdate : Int!
}

input HistoryHitsInput {
    id         : Int!
    counters   : [Int!]!
    lastUpdate : Int!
}

type RequestCount {
    db       : String
    requests : Int!
    tasks    : Int!
}

input RequestCountInput {
    db       : String
    requests : Int!
    tasks    : Int!
}

type SubscriptionEvents {
    seq         : Int!
    queued      : Int!
    queueEvents : Boolean!
    connected   : Boolean!
    messageSubs : [String!]
    changeSubs  : [ChangeSubscription!]
}

input SubscriptionEventsInput {
    seq         : Int!
    queued      : Int!
    queueEvents : Boolean!
    connected   : Boolean!
    messageSubs : [String!]
    changeSubs  : [ChangeSubscriptionInput!]
}

type ChangeSubscription {
    container : String!
    changes   : [EntityChange!]!
    filter    : String
}

input ChangeSubscriptionInput {
    container : String!
    changes   : [EntityChange!]!
    filter    : String
}

enum EntityChange {
    create
    upsert
    patch
    delete
}

type ClearStats {
    _: Boolean
}

input ClearStatsInput {
    _: Boolean
}

type ClearStatsResult {
    _: Boolean
}

input ClearStatsResultInput {
    _: Boolean
}

type DbContainers {
    id         : String!
    storage    : String!
    containers : [String!]!
}

input DbContainersInput {
    id         : String!
    storage    : String!
    containers : [String!]!
}

type DbMessages {
    id       : String!
    commands : [String!]!
    messages : [String!]!
}

input DbMessagesInput {
    id       : String!
    commands : [String!]!
    messages : [String!]!
}

type DbSchema {
    id          : String!
    schemaName  : String!
    schemaPath  : String!
    jsonSchemas : Any
}

input DbSchemaInput {
    id          : String!
    schemaName  : String!
    schemaPath  : String!
    jsonSchemas : Any
}

type DbStats {
    containers : [ContainerStats!]
}

input DbStatsInput {
    containers : [ContainerStatsInput!]
}

type ContainerStats {
    name  : String!
    count : Int!
}

input ContainerStatsInput {
    name  : String!
    count : Int!
}

type HostParam {
    memory    : Boolean
    gcCollect : Boolean
}

input HostParamInput {
    memory    : Boolean
    gcCollect : Boolean
}

type HostInfo {
    hostVersion    : String!
    flioxVersion   : String!
    hostName       : String
    projectName    : String
    projectWebsite : String
    envName        : String
    envColor       : String
    pubSub         : Boolean!
    routes         : [String!]!
    memory         : HostMemory
}

input HostInfoInput {
    hostVersion    : String!
    flioxVersion   : String!
    hostName       : String
    projectName    : String
    projectWebsite : String
    envName        : String
    envColor       : String
    pubSub         : Boolean!
    routes         : [String!]!
    memory         : HostMemoryInput
}

type HostMemory {
    totalAllocatedBytes : Int!
    totalMemory         : Int!
    gc                  : HostGCMemory
}

input HostMemoryInput {
    totalAllocatedBytes : Int!
    totalMemory         : Int!
    gc                  : HostGCMemoryInput
}

type HostGCMemory {
    highMemoryLoadThresholdBytes : Int!
    totalAvailableMemoryBytes    : Int!
    memoryLoadBytes              : Int!
    heapSizeBytes                : Int!
    fragmentedBytes              : Int!
}

input HostGCMemoryInput {
    highMemoryLoadThresholdBytes : Int!
    totalAvailableMemoryBytes    : Int!
    memoryLoadBytes              : Int!
    heapSizeBytes                : Int!
    fragmentedBytes              : Int!
}

type HostCluster {
    databases : [DbContainers!]!
}

input HostClusterInput {
    databases : [DbContainersInput!]!
}

type UserParam {
    addGroups    : [String!]
    removeGroups : [String!]
}

input UserParamInput {
    addGroups    : [String!]
    removeGroups : [String!]
}

type UserResult {
    groups  : [String!]!
    clients : [String!]!
    counts  : [RequestCount!]!
}

input UserResultInput {
    groups  : [String!]!
    clients : [String!]!
    counts  : [RequestCountInput!]!
}

type ClientParam {
    ensureClientId : Boolean
    queueEvents    : Boolean
}

input ClientParamInput {
    ensureClientId : Boolean
    queueEvents    : Boolean
}

type ClientResult {
    queueEvents        : Boolean!
    queuedEvents       : Int!
    clientId           : String
    subscriptionEvents : SubscriptionEvents
}

input ClientResultInput {
    queueEvents        : Boolean!
    queuedEvents       : Int!
    clientId           : String
    subscriptionEvents : SubscriptionEventsInput
}

