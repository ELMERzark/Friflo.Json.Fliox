# Generated by: https://github.com/friflo/Friflo.Json.Fliox#schema

scalar String

scalar Int

scalar Float

scalar Boolean

scalar Any

type Query {
    queryContainers(filter: String, limit: Int, maxCount: Int, cursor: String, selectAll: Boolean) : QueryContainersResult!
    queryMessages  (filter: String, limit: Int, maxCount: Int, cursor: String, selectAll: Boolean) : QueryMessagesResult!
    querySchemas   (filter: String, limit: Int, maxCount: Int, cursor: String, selectAll: Boolean) : QuerySchemasResult!
    readContainers (ids: [String!]!, selectAll: Boolean) : [DbContainers]!
    readMessages   (ids: [String!]!, selectAll: Boolean) : [DbMessages]!
    readSchemas    (ids: [String!]!, selectAll: Boolean) : [DbSchema]!
    countContainers(filter: String) : Int
    countMessages  (filter: String) : Int
    countSchemas   (filter: String) : Int
    std_Echo       (param: Any!) : Any!
    std_Containers  : DbContainers!
    std_Messages    : DbMessages!
    std_Schema      : DbSchema!
    std_Stats      (param: String) : DbStats!
    std_Host        : HostInfo!
    std_Cluster     : HostCluster!
    std_User       (param: UserParamInput) : UserResult!
    std_Client     (param: ClientParamInput) : ClientResult!
}

type QueryContainersResult {
    count  : Int!
    cursor : String
    items  : [DbContainers!]!
}

type QueryMessagesResult {
    count  : Int!
    cursor : String
    items  : [DbMessages!]!
}

type QuerySchemasResult {
    count  : Int!
    cursor : String
    items  : [DbSchema!]!
}

type EntityError {
    id      : String!
    type    : String!
    message : String!
}

type Mutation {
    createContainers(entities: [DbContainersInput!]!) : [EntityError!]
    createMessages  (entities: [DbMessagesInput!]!) : [EntityError!]
    createSchemas   (entities: [DbSchemaInput!]!) : [EntityError!]
    upsertContainers(entities: [DbContainersInput!]!) : [EntityError!]
    upsertMessages  (entities: [DbMessagesInput!]!) : [EntityError!]
    upsertSchemas   (entities: [DbSchemaInput!]!) : [EntityError!]
    deleteContainers(ids: [String!]!) : [EntityError!]
    deleteMessages  (ids: [String!]!) : [EntityError!]
    deleteSchemas   (ids: [String!]!) : [EntityError!]
}

type ClusterStore {
    containers : Any
    messages   : Any
    schemas    : Any
}

type DbContainers {
    id         : String!
    storage    : String!
    containers : [String!]!
}

input DbContainersInput {
    id         : String!
    storage    : String!
    containers : [String!]!
}

type DbMessages {
    id       : String!
    commands : [String!]!
    messages : [String!]!
}

input DbMessagesInput {
    id       : String!
    commands : [String!]!
    messages : [String!]!
}

type DbSchema {
    id          : String!
    schemaName  : String!
    schemaPath  : String!
    jsonSchemas : Any
}

input DbSchemaInput {
    id          : String!
    schemaName  : String!
    schemaPath  : String!
    jsonSchemas : Any
}

type DbStats {
    containers : [ContainerStats!]
}

input DbStatsInput {
    containers : [ContainerStatsInput!]
}

type ContainerStats {
    name  : String!
    count : Int!
}

input ContainerStatsInput {
    name  : String!
    count : Int!
}

type HostInfo {
    hostVersion    : String!
    flioxVersion   : String!
    hostName       : String
    projectName    : String
    projectWebsite : String
    envName        : String
    envColor       : String
    routes         : [String!]!
}

input HostInfoInput {
    hostVersion    : String!
    flioxVersion   : String!
    hostName       : String
    projectName    : String
    projectWebsite : String
    envName        : String
    envColor       : String
    routes         : [String!]!
}

type HostCluster {
    databases : [DbContainers!]!
}

input HostClusterInput {
    databases : [DbContainersInput!]!
}

type UserParam {
    addGroups    : [String!]
    removeGroups : [String!]
}

input UserParamInput {
    addGroups    : [String!]
    removeGroups : [String!]
}

type UserResult {
    groups : [String!]!
}

input UserResultInput {
    groups : [String!]!
}

type ClientParam {
    syncEvents : Boolean!
}

input ClientParamInput {
    syncEvents : Boolean!
}

type ClientResult {
    queuedEvents : Int!
}

input ClientResultInput {
    queuedEvents : Int!
}

