// Generated by: https://github.com/friflo/Friflo.Json.Fliox#schema
using Friflo.Json.Fliox.Mapper.Map;
using Friflo.Json.Fliox.Hub.Protocol.Tasks;

// ReSharper disable InconsistentNaming
namespace Gen.Friflo.Json.Fliox.Hub.Protocol.Tasks
{
    static class Gen_SendMessage
    {
        private const int Gen_info = 0;
        private const int Gen_name = 1;
        private const int Gen_param = 2;
        private const int Gen_users = 3;
        private const int Gen_clients = 4;
        private const int Gen_groups = 5;

        private static bool ReadField (ref SendMessage obj, PropField field, ref Reader reader) {
            bool success;
            switch (field.genIndex) {
                case Gen_info:    obj.info    = reader.ReadJsonValue (field, out success);  return success;
                case Gen_name:    obj.name    = reader.ReadString    (field, obj.name,    out success);  return success;
                case Gen_param:   obj.param   = reader.ReadJsonValue (field, out success);  return success;
                case Gen_users:   obj.users   = reader.ReadClass     (field, obj.users,   out success);  return success;
                case Gen_clients: obj.clients = reader.ReadClass     (field, obj.clients, out success);  return success;
                case Gen_groups:  obj.groups  = reader.ReadClass     (field, obj.groups,  out success);  return success;
            }
            return false;
        }

        private static void Write(ref SendMessage obj, PropField[] fields, ref Writer writer, ref bool firstMember) {
            writer.WriteJsonValue (fields[Gen_info],    obj.info,    ref firstMember);
            writer.WriteString    (fields[Gen_name],    obj.name,    ref firstMember);
            writer.WriteJsonValue (fields[Gen_param],   obj.param,   ref firstMember);
            writer.WriteClass     (fields[Gen_users],   obj.users,   ref firstMember);
            writer.WriteClass     (fields[Gen_clients], obj.clients, ref firstMember);
            writer.WriteClass     (fields[Gen_groups],  obj.groups,  ref firstMember);
        }
    }
}

