
{
  "openapi": "3.0.0",
  "x-generator": "Generated by: https://github.com/friflo/Friflo.Json.Fliox#schema",
  "info": {
    "title":        "EntityIdStore",
    "description":  "Generated by <a href='https://github.com/friflo/Friflo.Json.Fliox#schema'>JSON Fliox</a>",
    "version":      "0.0.0"
  },
  "servers": [

  ],
  "tags": [
    {
      "name": "database",
      "description": "<a target='EntityIdStore' href='html/schema.html'>schema</a>"
    },
    {
      "name": "commands",
      "description": "database <a target='EntityIdStore' href='html/schema.html#commands'>commands</a>"
    },
    {
      "name": "guidEntities",
      "description": "entity type: <a target='EntityIdStore' href='html/schema.html#Friflo.Json.Tests.Common.UnitTest.Fliox.Client.GuidEntity'>GuidEntity</a>"
    },
    {
      "name": "intEntities",
      "description": "entity type: <a target='EntityIdStore' href='html/schema.html#Friflo.Json.Tests.Common.UnitTest.Fliox.Client.IntEntity'>IntEntity</a>"
    },
    {
      "name": "intEntitiesAuto",
      "description": "entity type: <a target='EntityIdStore' href='html/schema.html#Friflo.Json.Tests.Common.UnitTest.Fliox.Client.AutoIntEntity'>AutoIntEntity</a>"
    },
    {
      "name": "longEntities",
      "description": "entity type: <a target='EntityIdStore' href='html/schema.html#Friflo.Json.Tests.Common.UnitTest.Fliox.Client.LongEntity'>LongEntity</a>"
    },
    {
      "name": "shortEntities",
      "description": "entity type: <a target='EntityIdStore' href='html/schema.html#Friflo.Json.Tests.Common.UnitTest.Fliox.Client.ShortEntity'>ShortEntity</a>"
    },
    {
      "name": "byteEntities",
      "description": "entity type: <a target='EntityIdStore' href='html/schema.html#Friflo.Json.Tests.Common.UnitTest.Fliox.Client.ByteEntity'>ByteEntity</a>"
    },
    {
      "name": "customIdEntities",
      "description": "entity type: <a target='EntityIdStore' href='html/schema.html#Friflo.Json.Tests.Common.UnitTest.Fliox.Client.CustomIdEntity'>CustomIdEntity</a>"
    },
    {
      "name": "entityRefs",
      "description": "entity type: <a target='EntityIdStore' href='html/schema.html#Friflo.Json.Tests.Common.UnitTest.Fliox.Client.EntityRefs'>EntityRefs</a>"
    },
    {
      "name": "customIdEntities2",
      "description": "entity type: <a target='EntityIdStore' href='html/schema.html#Friflo.Json.Tests.Common.UnitTest.Fliox.Client.CustomIdEntity2'>CustomIdEntity2</a>"
    }],
  "paths": {
    "/": {
      "get": {
        "summary":    "return all database containers",
        "tags":       ["database"],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/DbContainers"
                }
              }
            }
          }
        }
      }
    },
    "/?cmd=std.Echo": {
      "post": {
        "summary":    "Echos the given parameter to assure the database is working appropriately.",
        "tags":       ["commands"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                   
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                   
                }
              }
            }
          }
        }
      }
    },
    "/?cmd=std.Delay": {
      "post": {
        "summary":    "A command that completes after a specified number of milliseconds.",
        "tags":       ["commands"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "$ref": "Standard.json#/definitions/int32"
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "Standard.json#/definitions/int32"
                }
              }
            }
          }
        }
      }
    },
    "/?cmd=std.Containers": {
      "post": {
        "summary":    "List all database containers",
        "tags":       ["commands"],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/DbContainers"
                }
              }
            }
          }
        }
      }
    },
    "/?cmd=std.Messages": {
      "post": {
        "summary":    "List all database commands and messages",
        "tags":       ["commands"],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/DbMessages"
                }
              }
            }
          }
        }
      }
    },
    "/?cmd=std.Schema": {
      "post": {
        "summary":    "Return the Schema assigned to the database",
        "tags":       ["commands"],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/DbSchema"
                }
              }
            }
          }
        }
      }
    },
    "/?cmd=std.Stats": {
      "post": {
        "summary":    "Return the number of entities of all containers (or the given container) of the database",
        "tags":       ["commands"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/DbStats"
                }
              }
            }
          }
        }
      }
    },
    "/?cmd=std.Host": {
      "post": {
        "summary":    "Returns general information about the Hub like version, host, project and environment name",
        "tags":       ["commands"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "$ref": "Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/HostParam"
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/HostInfo"
                }
              }
            }
          }
        }
      }
    },
    "/?cmd=std.Cluster": {
      "post": {
        "summary":    "List all databases and their containers hosted by the Hub",
        "tags":       ["commands"],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/HostCluster"
                }
              }
            }
          }
        }
      }
    },
    "/?cmd=std.User": {
      "post": {
        "summary":    "Return the groups of the current user. Optionally change the groups of the current user",
        "tags":       ["commands"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "$ref": "Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/UserParam"
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/UserResult"
                }
              }
            }
          }
        }
      }
    },
    "/?cmd=std.Client": {
      "post": {
        "summary":    "Return client specific infos and adjust general client behavior like <b>queueEvents</b>",
        "tags":       ["commands"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "$ref": "Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/ClientParam"
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/ClientResult"
                }
              }
            }
          }
        }
      }
    },
    "/guidEntities": {
      "get": {
        "summary":    "return / filter multiple records from container guidEntities",
        "description":    "To process big result sets fetch them iteratively by setting **maxCount** of records per request and use the returned **cursor** on the subsequent request.",
        "tags":       ["guidEntities"],
        "parameters": [
          {
            "in":       "query",
            "name":     "filter",
            "schema":   { "type": "string" },
            "description": "filter returned records by applying a expression predicate. E.g. `o.name == 'Peter'`"
          },
          {
            "in":       "query",
            "name":     "limit",
            "schema":   { "type": "integer" },
            "description": "limit the number of returned records"
          },
          {
            "in":       "query",
            "name":     "maxCount",
            "schema":   { "type": "integer" },
            "description": "maximum number of records. Result will return a **cursor** if more records available."
          },
          {
            "in":       "query",
            "name":     "cursor",
            "schema":   { "type": "string" },
            "description": "pass the **cursor** returned by the previous request"
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "UnitTest.Fliox.Client.GuidEntity.json#/definitions/GuidEntity"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary":    "create or update multiple records in container guidEntities",
        "tags":       ["guidEntities"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "UnitTest.Fliox.Client.GuidEntity.json#/definitions/GuidEntity" }
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      }
    },
    "/guidEntities/{id}": {
      "get": {
        "summary":    "get a single record from container guidEntities",
        "tags":       ["guidEntities"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "UnitTest.Fliox.Client.GuidEntity.json#/definitions/GuidEntity"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary":    "write a single record to container guidEntities",
        "tags":       ["guidEntities"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "$ref": "UnitTest.Fliox.Client.GuidEntity.json#/definitions/GuidEntity"
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      },
      "patch": {
        "summary":    "patch a single record in container guidEntities",
        "tags":       ["guidEntities"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { 
                    "type": "object",
                    "properties": {
                      "op": {
                        "enum": ["replace"]
                      },
                      "path": {
                        "type": "string"
                      },
                      "value": { }
                    } }
                },
                "example": [
                  {
                    "op":    "replace",
                    "path":  ".name",
                    "value": "Hello Patch!"
                  }
                ]
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      },
      "delete": {
        "summary":    "delete a single record in container guidEntities by id",
        "tags":       ["guidEntities"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      }
    },
    "/guidEntities/bulk-get": {
      "post": {
        "summary":    "get multiple records by id from container guidEntities",
        "tags":       ["guidEntities"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "string" }
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "UnitTest.Fliox.Client.GuidEntity.json#/definitions/GuidEntity" }
                }
              }
            }
          }
        }
      }
    },
    "/guidEntities/bulk-delete": {
      "post": {
        "summary":    "delete multiple records by id in container guidEntities",
        "tags":       ["guidEntities"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "string" }
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      }
    },
    "/intEntities": {
      "get": {
        "summary":    "return / filter multiple records from container intEntities",
        "description":    "To process big result sets fetch them iteratively by setting **maxCount** of records per request and use the returned **cursor** on the subsequent request.",
        "tags":       ["intEntities"],
        "parameters": [
          {
            "in":       "query",
            "name":     "filter",
            "schema":   { "type": "string" },
            "description": "filter returned records by applying a expression predicate. E.g. `o.name == 'Peter'`"
          },
          {
            "in":       "query",
            "name":     "limit",
            "schema":   { "type": "integer" },
            "description": "limit the number of returned records"
          },
          {
            "in":       "query",
            "name":     "maxCount",
            "schema":   { "type": "integer" },
            "description": "maximum number of records. Result will return a **cursor** if more records available."
          },
          {
            "in":       "query",
            "name":     "cursor",
            "schema":   { "type": "string" },
            "description": "pass the **cursor** returned by the previous request"
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "UnitTest.Fliox.Client.IntEntity.json#/definitions/IntEntity"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary":    "create or update multiple records in container intEntities",
        "tags":       ["intEntities"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "UnitTest.Fliox.Client.IntEntity.json#/definitions/IntEntity" }
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      }
    },
    "/intEntities/{id}": {
      "get": {
        "summary":    "get a single record from container intEntities",
        "tags":       ["intEntities"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "UnitTest.Fliox.Client.IntEntity.json#/definitions/IntEntity"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary":    "write a single record to container intEntities",
        "tags":       ["intEntities"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "$ref": "UnitTest.Fliox.Client.IntEntity.json#/definitions/IntEntity"
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      },
      "patch": {
        "summary":    "patch a single record in container intEntities",
        "tags":       ["intEntities"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { 
                    "type": "object",
                    "properties": {
                      "op": {
                        "enum": ["replace"]
                      },
                      "path": {
                        "type": "string"
                      },
                      "value": { }
                    } }
                },
                "example": [
                  {
                    "op":    "replace",
                    "path":  ".name",
                    "value": "Hello Patch!"
                  }
                ]
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      },
      "delete": {
        "summary":    "delete a single record in container intEntities by id",
        "tags":       ["intEntities"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      }
    },
    "/intEntities/bulk-get": {
      "post": {
        "summary":    "get multiple records by id from container intEntities",
        "tags":       ["intEntities"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "string" }
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "UnitTest.Fliox.Client.IntEntity.json#/definitions/IntEntity" }
                }
              }
            }
          }
        }
      }
    },
    "/intEntities/bulk-delete": {
      "post": {
        "summary":    "delete multiple records by id in container intEntities",
        "tags":       ["intEntities"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "string" }
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      }
    },
    "/intEntitiesAuto": {
      "get": {
        "summary":    "return / filter multiple records from container intEntitiesAuto",
        "description":    "To process big result sets fetch them iteratively by setting **maxCount** of records per request and use the returned **cursor** on the subsequent request.",
        "tags":       ["intEntitiesAuto"],
        "parameters": [
          {
            "in":       "query",
            "name":     "filter",
            "schema":   { "type": "string" },
            "description": "filter returned records by applying a expression predicate. E.g. `o.name == 'Peter'`"
          },
          {
            "in":       "query",
            "name":     "limit",
            "schema":   { "type": "integer" },
            "description": "limit the number of returned records"
          },
          {
            "in":       "query",
            "name":     "maxCount",
            "schema":   { "type": "integer" },
            "description": "maximum number of records. Result will return a **cursor** if more records available."
          },
          {
            "in":       "query",
            "name":     "cursor",
            "schema":   { "type": "string" },
            "description": "pass the **cursor** returned by the previous request"
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "UnitTest.Fliox.Client.AutoIntEntity.json#/definitions/AutoIntEntity"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary":    "create or update multiple records in container intEntitiesAuto",
        "tags":       ["intEntitiesAuto"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "UnitTest.Fliox.Client.AutoIntEntity.json#/definitions/AutoIntEntity" }
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      }
    },
    "/intEntitiesAuto/{id}": {
      "get": {
        "summary":    "get a single record from container intEntitiesAuto",
        "tags":       ["intEntitiesAuto"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "UnitTest.Fliox.Client.AutoIntEntity.json#/definitions/AutoIntEntity"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary":    "write a single record to container intEntitiesAuto",
        "tags":       ["intEntitiesAuto"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "$ref": "UnitTest.Fliox.Client.AutoIntEntity.json#/definitions/AutoIntEntity"
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      },
      "patch": {
        "summary":    "patch a single record in container intEntitiesAuto",
        "tags":       ["intEntitiesAuto"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { 
                    "type": "object",
                    "properties": {
                      "op": {
                        "enum": ["replace"]
                      },
                      "path": {
                        "type": "string"
                      },
                      "value": { }
                    } }
                },
                "example": [
                  {
                    "op":    "replace",
                    "path":  ".name",
                    "value": "Hello Patch!"
                  }
                ]
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      },
      "delete": {
        "summary":    "delete a single record in container intEntitiesAuto by id",
        "tags":       ["intEntitiesAuto"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      }
    },
    "/intEntitiesAuto/bulk-get": {
      "post": {
        "summary":    "get multiple records by id from container intEntitiesAuto",
        "tags":       ["intEntitiesAuto"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "string" }
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "UnitTest.Fliox.Client.AutoIntEntity.json#/definitions/AutoIntEntity" }
                }
              }
            }
          }
        }
      }
    },
    "/intEntitiesAuto/bulk-delete": {
      "post": {
        "summary":    "delete multiple records by id in container intEntitiesAuto",
        "tags":       ["intEntitiesAuto"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "string" }
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      }
    },
    "/longEntities": {
      "get": {
        "summary":    "return / filter multiple records from container longEntities",
        "description":    "To process big result sets fetch them iteratively by setting **maxCount** of records per request and use the returned **cursor** on the subsequent request.",
        "tags":       ["longEntities"],
        "parameters": [
          {
            "in":       "query",
            "name":     "filter",
            "schema":   { "type": "string" },
            "description": "filter returned records by applying a expression predicate. E.g. `o.name == 'Peter'`"
          },
          {
            "in":       "query",
            "name":     "limit",
            "schema":   { "type": "integer" },
            "description": "limit the number of returned records"
          },
          {
            "in":       "query",
            "name":     "maxCount",
            "schema":   { "type": "integer" },
            "description": "maximum number of records. Result will return a **cursor** if more records available."
          },
          {
            "in":       "query",
            "name":     "cursor",
            "schema":   { "type": "string" },
            "description": "pass the **cursor** returned by the previous request"
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "UnitTest.Fliox.Client.LongEntity.json#/definitions/LongEntity"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary":    "create or update multiple records in container longEntities",
        "tags":       ["longEntities"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "UnitTest.Fliox.Client.LongEntity.json#/definitions/LongEntity" }
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      }
    },
    "/longEntities/{id}": {
      "get": {
        "summary":    "get a single record from container longEntities",
        "tags":       ["longEntities"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "UnitTest.Fliox.Client.LongEntity.json#/definitions/LongEntity"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary":    "write a single record to container longEntities",
        "tags":       ["longEntities"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "$ref": "UnitTest.Fliox.Client.LongEntity.json#/definitions/LongEntity"
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      },
      "patch": {
        "summary":    "patch a single record in container longEntities",
        "tags":       ["longEntities"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { 
                    "type": "object",
                    "properties": {
                      "op": {
                        "enum": ["replace"]
                      },
                      "path": {
                        "type": "string"
                      },
                      "value": { }
                    } }
                },
                "example": [
                  {
                    "op":    "replace",
                    "path":  ".name",
                    "value": "Hello Patch!"
                  }
                ]
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      },
      "delete": {
        "summary":    "delete a single record in container longEntities by id",
        "tags":       ["longEntities"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      }
    },
    "/longEntities/bulk-get": {
      "post": {
        "summary":    "get multiple records by id from container longEntities",
        "tags":       ["longEntities"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "string" }
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "UnitTest.Fliox.Client.LongEntity.json#/definitions/LongEntity" }
                }
              }
            }
          }
        }
      }
    },
    "/longEntities/bulk-delete": {
      "post": {
        "summary":    "delete multiple records by id in container longEntities",
        "tags":       ["longEntities"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "string" }
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      }
    },
    "/shortEntities": {
      "get": {
        "summary":    "return / filter multiple records from container shortEntities",
        "description":    "To process big result sets fetch them iteratively by setting **maxCount** of records per request and use the returned **cursor** on the subsequent request.",
        "tags":       ["shortEntities"],
        "parameters": [
          {
            "in":       "query",
            "name":     "filter",
            "schema":   { "type": "string" },
            "description": "filter returned records by applying a expression predicate. E.g. `o.name == 'Peter'`"
          },
          {
            "in":       "query",
            "name":     "limit",
            "schema":   { "type": "integer" },
            "description": "limit the number of returned records"
          },
          {
            "in":       "query",
            "name":     "maxCount",
            "schema":   { "type": "integer" },
            "description": "maximum number of records. Result will return a **cursor** if more records available."
          },
          {
            "in":       "query",
            "name":     "cursor",
            "schema":   { "type": "string" },
            "description": "pass the **cursor** returned by the previous request"
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "UnitTest.Fliox.Client.ShortEntity.json#/definitions/ShortEntity"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary":    "create or update multiple records in container shortEntities",
        "tags":       ["shortEntities"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "UnitTest.Fliox.Client.ShortEntity.json#/definitions/ShortEntity" }
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      }
    },
    "/shortEntities/{id}": {
      "get": {
        "summary":    "get a single record from container shortEntities",
        "tags":       ["shortEntities"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "UnitTest.Fliox.Client.ShortEntity.json#/definitions/ShortEntity"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary":    "write a single record to container shortEntities",
        "tags":       ["shortEntities"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "$ref": "UnitTest.Fliox.Client.ShortEntity.json#/definitions/ShortEntity"
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      },
      "patch": {
        "summary":    "patch a single record in container shortEntities",
        "tags":       ["shortEntities"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { 
                    "type": "object",
                    "properties": {
                      "op": {
                        "enum": ["replace"]
                      },
                      "path": {
                        "type": "string"
                      },
                      "value": { }
                    } }
                },
                "example": [
                  {
                    "op":    "replace",
                    "path":  ".name",
                    "value": "Hello Patch!"
                  }
                ]
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      },
      "delete": {
        "summary":    "delete a single record in container shortEntities by id",
        "tags":       ["shortEntities"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      }
    },
    "/shortEntities/bulk-get": {
      "post": {
        "summary":    "get multiple records by id from container shortEntities",
        "tags":       ["shortEntities"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "string" }
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "UnitTest.Fliox.Client.ShortEntity.json#/definitions/ShortEntity" }
                }
              }
            }
          }
        }
      }
    },
    "/shortEntities/bulk-delete": {
      "post": {
        "summary":    "delete multiple records by id in container shortEntities",
        "tags":       ["shortEntities"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "string" }
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      }
    },
    "/byteEntities": {
      "get": {
        "summary":    "return / filter multiple records from container byteEntities",
        "description":    "To process big result sets fetch them iteratively by setting **maxCount** of records per request and use the returned **cursor** on the subsequent request.",
        "tags":       ["byteEntities"],
        "parameters": [
          {
            "in":       "query",
            "name":     "filter",
            "schema":   { "type": "string" },
            "description": "filter returned records by applying a expression predicate. E.g. `o.name == 'Peter'`"
          },
          {
            "in":       "query",
            "name":     "limit",
            "schema":   { "type": "integer" },
            "description": "limit the number of returned records"
          },
          {
            "in":       "query",
            "name":     "maxCount",
            "schema":   { "type": "integer" },
            "description": "maximum number of records. Result will return a **cursor** if more records available."
          },
          {
            "in":       "query",
            "name":     "cursor",
            "schema":   { "type": "string" },
            "description": "pass the **cursor** returned by the previous request"
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "UnitTest.Fliox.Client.ByteEntity.json#/definitions/ByteEntity"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary":    "create or update multiple records in container byteEntities",
        "tags":       ["byteEntities"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "UnitTest.Fliox.Client.ByteEntity.json#/definitions/ByteEntity" }
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      }
    },
    "/byteEntities/{id}": {
      "get": {
        "summary":    "get a single record from container byteEntities",
        "tags":       ["byteEntities"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "UnitTest.Fliox.Client.ByteEntity.json#/definitions/ByteEntity"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary":    "write a single record to container byteEntities",
        "tags":       ["byteEntities"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "$ref": "UnitTest.Fliox.Client.ByteEntity.json#/definitions/ByteEntity"
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      },
      "patch": {
        "summary":    "patch a single record in container byteEntities",
        "tags":       ["byteEntities"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { 
                    "type": "object",
                    "properties": {
                      "op": {
                        "enum": ["replace"]
                      },
                      "path": {
                        "type": "string"
                      },
                      "value": { }
                    } }
                },
                "example": [
                  {
                    "op":    "replace",
                    "path":  ".name",
                    "value": "Hello Patch!"
                  }
                ]
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      },
      "delete": {
        "summary":    "delete a single record in container byteEntities by id",
        "tags":       ["byteEntities"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      }
    },
    "/byteEntities/bulk-get": {
      "post": {
        "summary":    "get multiple records by id from container byteEntities",
        "tags":       ["byteEntities"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "string" }
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "UnitTest.Fliox.Client.ByteEntity.json#/definitions/ByteEntity" }
                }
              }
            }
          }
        }
      }
    },
    "/byteEntities/bulk-delete": {
      "post": {
        "summary":    "delete multiple records by id in container byteEntities",
        "tags":       ["byteEntities"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "string" }
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      }
    },
    "/customIdEntities": {
      "get": {
        "summary":    "return / filter multiple records from container customIdEntities",
        "description":    "To process big result sets fetch them iteratively by setting **maxCount** of records per request and use the returned **cursor** on the subsequent request.",
        "tags":       ["customIdEntities"],
        "parameters": [
          {
            "in":       "query",
            "name":     "filter",
            "schema":   { "type": "string" },
            "description": "filter returned records by applying a expression predicate. E.g. `o.name == 'Peter'`"
          },
          {
            "in":       "query",
            "name":     "limit",
            "schema":   { "type": "integer" },
            "description": "limit the number of returned records"
          },
          {
            "in":       "query",
            "name":     "maxCount",
            "schema":   { "type": "integer" },
            "description": "maximum number of records. Result will return a **cursor** if more records available."
          },
          {
            "in":       "query",
            "name":     "cursor",
            "schema":   { "type": "string" },
            "description": "pass the **cursor** returned by the previous request"
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "UnitTest.Fliox.Client.CustomIdEntity.json#/definitions/CustomIdEntity"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary":    "create or update multiple records in container customIdEntities",
        "tags":       ["customIdEntities"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "UnitTest.Fliox.Client.CustomIdEntity.json#/definitions/CustomIdEntity" }
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      }
    },
    "/customIdEntities/{id}": {
      "get": {
        "summary":    "get a single record from container customIdEntities",
        "tags":       ["customIdEntities"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "UnitTest.Fliox.Client.CustomIdEntity.json#/definitions/CustomIdEntity"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary":    "write a single record to container customIdEntities",
        "tags":       ["customIdEntities"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "$ref": "UnitTest.Fliox.Client.CustomIdEntity.json#/definitions/CustomIdEntity"
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      },
      "patch": {
        "summary":    "patch a single record in container customIdEntities",
        "tags":       ["customIdEntities"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { 
                    "type": "object",
                    "properties": {
                      "op": {
                        "enum": ["replace"]
                      },
                      "path": {
                        "type": "string"
                      },
                      "value": { }
                    } }
                },
                "example": [
                  {
                    "op":    "replace",
                    "path":  ".name",
                    "value": "Hello Patch!"
                  }
                ]
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      },
      "delete": {
        "summary":    "delete a single record in container customIdEntities by id",
        "tags":       ["customIdEntities"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      }
    },
    "/customIdEntities/bulk-get": {
      "post": {
        "summary":    "get multiple records by id from container customIdEntities",
        "tags":       ["customIdEntities"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "string" }
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "UnitTest.Fliox.Client.CustomIdEntity.json#/definitions/CustomIdEntity" }
                }
              }
            }
          }
        }
      }
    },
    "/customIdEntities/bulk-delete": {
      "post": {
        "summary":    "delete multiple records by id in container customIdEntities",
        "tags":       ["customIdEntities"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "string" }
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      }
    },
    "/entityRefs": {
      "get": {
        "summary":    "return / filter multiple records from container entityRefs",
        "description":    "To process big result sets fetch them iteratively by setting **maxCount** of records per request and use the returned **cursor** on the subsequent request.",
        "tags":       ["entityRefs"],
        "parameters": [
          {
            "in":       "query",
            "name":     "filter",
            "schema":   { "type": "string" },
            "description": "filter returned records by applying a expression predicate. E.g. `o.name == 'Peter'`"
          },
          {
            "in":       "query",
            "name":     "limit",
            "schema":   { "type": "integer" },
            "description": "limit the number of returned records"
          },
          {
            "in":       "query",
            "name":     "maxCount",
            "schema":   { "type": "integer" },
            "description": "maximum number of records. Result will return a **cursor** if more records available."
          },
          {
            "in":       "query",
            "name":     "cursor",
            "schema":   { "type": "string" },
            "description": "pass the **cursor** returned by the previous request"
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "UnitTest.Fliox.Client.EntityRefs.json#/definitions/EntityRefs"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary":    "create or update multiple records in container entityRefs",
        "tags":       ["entityRefs"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "UnitTest.Fliox.Client.EntityRefs.json#/definitions/EntityRefs" }
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      }
    },
    "/entityRefs/{id}": {
      "get": {
        "summary":    "get a single record from container entityRefs",
        "tags":       ["entityRefs"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "UnitTest.Fliox.Client.EntityRefs.json#/definitions/EntityRefs"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary":    "write a single record to container entityRefs",
        "tags":       ["entityRefs"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "$ref": "UnitTest.Fliox.Client.EntityRefs.json#/definitions/EntityRefs"
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      },
      "patch": {
        "summary":    "patch a single record in container entityRefs",
        "tags":       ["entityRefs"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { 
                    "type": "object",
                    "properties": {
                      "op": {
                        "enum": ["replace"]
                      },
                      "path": {
                        "type": "string"
                      },
                      "value": { }
                    } }
                },
                "example": [
                  {
                    "op":    "replace",
                    "path":  ".name",
                    "value": "Hello Patch!"
                  }
                ]
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      },
      "delete": {
        "summary":    "delete a single record in container entityRefs by id",
        "tags":       ["entityRefs"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      }
    },
    "/entityRefs/bulk-get": {
      "post": {
        "summary":    "get multiple records by id from container entityRefs",
        "tags":       ["entityRefs"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "string" }
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "UnitTest.Fliox.Client.EntityRefs.json#/definitions/EntityRefs" }
                }
              }
            }
          }
        }
      }
    },
    "/entityRefs/bulk-delete": {
      "post": {
        "summary":    "delete multiple records by id in container entityRefs",
        "tags":       ["entityRefs"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "string" }
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      }
    },
    "/customIdEntities2": {
      "get": {
        "summary":    "return / filter multiple records from container customIdEntities2",
        "description":    "To process big result sets fetch them iteratively by setting **maxCount** of records per request and use the returned **cursor** on the subsequent request.",
        "tags":       ["customIdEntities2"],
        "parameters": [
          {
            "in":       "query",
            "name":     "filter",
            "schema":   { "type": "string" },
            "description": "filter returned records by applying a expression predicate. E.g. `o.name == 'Peter'`"
          },
          {
            "in":       "query",
            "name":     "limit",
            "schema":   { "type": "integer" },
            "description": "limit the number of returned records"
          },
          {
            "in":       "query",
            "name":     "maxCount",
            "schema":   { "type": "integer" },
            "description": "maximum number of records. Result will return a **cursor** if more records available."
          },
          {
            "in":       "query",
            "name":     "cursor",
            "schema":   { "type": "string" },
            "description": "pass the **cursor** returned by the previous request"
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "UnitTest.Fliox.Client.CustomIdEntity2.json#/definitions/CustomIdEntity2"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary":    "create or update multiple records in container customIdEntities2",
        "tags":       ["customIdEntities2"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "UnitTest.Fliox.Client.CustomIdEntity2.json#/definitions/CustomIdEntity2" }
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      }
    },
    "/customIdEntities2/{id}": {
      "get": {
        "summary":    "get a single record from container customIdEntities2",
        "tags":       ["customIdEntities2"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "UnitTest.Fliox.Client.CustomIdEntity2.json#/definitions/CustomIdEntity2"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary":    "write a single record to container customIdEntities2",
        "tags":       ["customIdEntities2"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "$ref": "UnitTest.Fliox.Client.CustomIdEntity2.json#/definitions/CustomIdEntity2"
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      },
      "patch": {
        "summary":    "patch a single record in container customIdEntities2",
        "tags":       ["customIdEntities2"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { 
                    "type": "object",
                    "properties": {
                      "op": {
                        "enum": ["replace"]
                      },
                      "path": {
                        "type": "string"
                      },
                      "value": { }
                    } }
                },
                "example": [
                  {
                    "op":    "replace",
                    "path":  ".name",
                    "value": "Hello Patch!"
                  }
                ]
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      },
      "delete": {
        "summary":    "delete a single record in container customIdEntities2 by id",
        "tags":       ["customIdEntities2"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      }
    },
    "/customIdEntities2/bulk-get": {
      "post": {
        "summary":    "get multiple records by id from container customIdEntities2",
        "tags":       ["customIdEntities2"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "string" }
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "UnitTest.Fliox.Client.CustomIdEntity2.json#/definitions/CustomIdEntity2" }
                }
              }
            }
          }
        }
      }
    },
    "/customIdEntities2/bulk-delete": {
      "post": {
        "summary":    "delete multiple records by id in container customIdEntities2",
        "tags":       ["customIdEntities2"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "string" }
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      }
    }
  }   
}