
# Example requests bellow send to GraphServer in ./Main/Program.cs 
#
# Hint:
# use with [REST Client - Visual Studio Marketplace] https://marketplace.visualstudio.com/items?itemName=humao.rest-client

### simple message task
POST http://localhost:8081/ HTTP/1.1
content-type: application/json

{ "type": "sync",
  "tasks": [
  {
    "task":  "message",
    "name":  "test",
    "value": "some value"
  }
]}

### read entities by their ids
POST http://localhost:8081/ HTTP/1.1
content-type: application/json

{ "type": "sync",
  "tasks": [
  {
    "task": "read",	"container": "Article",
    "reads": [
      { "ids": ["article-galaxy", "article-ipad"] }
    ]
  }
]}

### read entity "order-1" and its reference to .customer
POST http://localhost:8081/ HTTP/1.1
content-type: application/json

{ "type": "sync",
  "tasks": [
  {
    "task": "read",         "container": "Order",
    "reads": [
      {
        "ids": ["order-1"],
        "references": [
          {
            "selector": ".customer",
            "container": "Customer"
          }
        ]
      }
    ]
  }
]}

### query all articles -> "filter": { "op":"true" }
POST http://localhost:8081/ HTTP/1.1
content-type: application/json

{ "type": "sync",
  "tasks": [
  {
    "task": "query",        "container": "Article",
    "filterLinq": "true",
    "filter": { "op":"true" }
  }
]}


### query articles with a filter => .name == "Smartphone"
POST http://localhost:8081/ HTTP/1.1
content-type: application/json

{ "type": "sync",
  "tasks": [
  {
    "task": "query",        "container": "Article",
    "filterLinq": "true",
    "filter": {"op":"equal", "left": {"op":"field",  "name":  ".name"},
                             "right":{"op":"string", "value": "Smartphone"}}
  }
]}


### query all articles, their referenced .producer (and the .employees[*] referenced by .producer)
POST http://localhost:8081/ HTTP/1.1
content-type: application/json

{ "type": "sync",
  "tasks": [
  {
    "task": "query",        "container": "Article",
    "filterLinq": "true",
    "filter": { "op":"true" },
    "references": [
      {
        "selector": ".producer",
        "container": "Producer",
        "references": [
          {
            "selector": ".employees[*]",
            "container": "Employee"
          }
        ]
      }
    ]
  }
]}

### create an article - creates file ./Json.Tests/assets/db/Article/new-article.json
POST http://localhost:8081/ HTTP/1.1
content-type: application/json

{ "type": "sync",
  "tasks": [
  {
    "task": "create",       "container": "Article",
    "entities": {
      "new-article": {
        "value": {"id": "new-article","name":"New Article S10"}
      }
    }
  }
]}

### delete an article
POST http://localhost:8081/ HTTP/1.1
content-type: application/json

{ "type": "sync",
  "tasks": [
  {
    "task": "delete",       "container": "Article",
    "ids": ["new-article"]
  }
]}

### patch article member .name (article need to be present)
POST http://localhost:8081/ HTTP/1.1
content-type: application/json

{ "type": "sync",
  "tasks": [
  {
    "task": "patch",        "container": "Article",
    "patches": {
      "new-article": {
        "patches": [
          {
            "op":"replace",
            "path": ".name",
            "value": "patched Name"
          }
        ]
      }
    }
  }
]}


### subscribe to all ("*") messages - run only for WebSocket; fails for HTTP POST
# Filter all messages matching to "name".
# "name": "*"                  => subscribe all message events.
# "name": "*", "remove": true  => unsubscribe all message events
POST http://localhost:8081/ HTTP/1.1
content-type: application/json

{ "type": "sync",
  "client": "client-1",
  "tasks": [{
    "task":     "subscribeMessage",
    "name":     "*",
    "remove":   false
  }
]}

### subscribe to database changes - run only for WebSocket; fails for HTTP POST
POST http://localhost:8081/ HTTP/1.1
content-type: application/json

{ "type": "sync",
  "client": "client-1",
  "tasks": [{
    "task": "subscribeChanges", "container": "Article", 
    "changes": ["create", "update", "delete", "patch"]
  }
]}


