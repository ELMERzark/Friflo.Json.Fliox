// Generated by: https://github.com/friflo/Friflo.Json.Fliox/tree/main/Json/Fliox/Schema
import { int32 }                 from "./Standard"
import { SyncRequestTask }       from "./Friflo.Json.Fliox.Hub.Protocol.Tasks"
import { SyncRequestTask_Union } from "./Friflo.Json.Fliox.Hub.Protocol.Tasks"
import { SyncTaskResult }        from "./Friflo.Json.Fliox.Hub.Protocol.Tasks"
import { SyncTaskResult_Union }  from "./Friflo.Json.Fliox.Hub.Protocol.Tasks"
import { EntityError }           from "./Friflo.Json.Fliox.Hub.Protocol.Models"

export type ProtocolMessage_Union =
    | SyncRequest
    | SyncResponse
    | ErrorResponse
    | EventMessage
;

export abstract class ProtocolMessage {
    abstract msg:
        | "sync"
        | "resp"
        | "error"
        | "ev"
    ;
}

export type ProtocolRequest_Union =
    | SyncRequest
;

export abstract class ProtocolRequest extends ProtocolMessage {
    abstract msg:
        | "sync"
    ;
    req? : int32 | null;
    clt? : string | null;
}

export class SyncRequest extends ProtocolRequest {
    msg       : "sync";
    user?     : string | null;
    token?    : string | null;
    ack?      : int32 | null;
    tasks     : SyncRequestTask_Union[];
    database? : string | null;
    info?     : any | null;
}

export type ProtocolResponse_Union =
    | SyncResponse
    | ErrorResponse
;

export abstract class ProtocolResponse extends ProtocolMessage {
    abstract msg:
        | "resp"
        | "error"
    ;
    req? : int32 | null;
    clt? : string | null;
}

export class SyncResponse extends ProtocolResponse {
    msg           : "resp";
    database?     : string | null;
    tasks?        : SyncTaskResult_Union[] | null;
    containers?   : ContainerEntities[] | null;
    createErrors? : { [key: string]: EntityErrors } | null;
    upsertErrors? : { [key: string]: EntityErrors } | null;
    patchErrors?  : { [key: string]: EntityErrors } | null;
    deleteErrors? : { [key: string]: EntityErrors } | null;
    info?         : any | null;
}

export class ContainerEntities {
    container  : string;
    entities   : any[];
    notFound?  : string[] | null;
    errors?    : { [key: string]: EntityError } | null;
}

export class EntityErrors {
    container? : string | null;
    errors     : { [key: string]: EntityError };
}

export class ErrorResponse extends ProtocolResponse {
    msg      : "error";
    message? : string | null;
    type     : ErrorResponseType;
}

export type ErrorResponseType =
    | "BadRequest"
    | "Exception"
    | "BadResponse"
;

export type ProtocolEvent_Union =
    | EventMessage
;

export abstract class ProtocolEvent extends ProtocolMessage {
    abstract msg:
        | "ev"
    ;
    seq  : int32;
    src  : string;
    clt  : string;
}

export class EventMessage extends ProtocolEvent {
    msg    : "ev";
    tasks? : SyncRequestTask_Union[] | null;
}

