# Generated by: https://github.com/friflo/Friflo.Json.Fliox#schema

scalar String

scalar Int

scalar Float

scalar Boolean

scalar Any

type Query {
    credentials     (filter: String, limit: Int) : [UserCredential!]!
    permissions     (filter: String, limit: Int) : [UserPermission!]!
    roles           (filter: String, limit: Int) : [Role!]!
    credentialsById (ids: [String!]!) : [UserCredential]!
    permissionsById (ids: [String!]!) : [UserPermission]!
    rolesById       (ids: [String!]!) : [Role]!
    AuthenticateUser(param: CredentialsInput) : AuthResult!
    std_Echo        (param: Any!) : Any!
    std_Containers   : DbContainers!
    std_Messages     : DbMessages!
    std_Schema       : DbSchema!
    std_Stats       (param: String) : DbStats!
    std_Details      : HostDetails!
    std_Cluster      : HostCluster!
}

type Mutation {
    createCredentials(entities: [UserCredentialInput!]!) : String
    createPermissions(entities: [UserPermissionInput!]!) : String
    createRoles      (entities: [RoleInput!]!) : String
}

type UserStore {
    credentials : Any
    permissions : Any
    roles       : Any
}

type UserCredential {
    id    : String!
    token : String
}

input UserCredentialInput {
    id    : String!
    token : String
}

type UserPermission {
    id    : String!
    roles : [String!]
}

input UserPermissionInput {
    id    : String!
    roles : [String!]
}

type Role {
    id          : String!
    rights      : [Right!]!
    description : String
}

input RoleInput {
    id          : String!
    rights      : [RightInput!]!
    description : String
}

union Right =
    | AllowRight
    | TaskRight
    | SendMessageRight
    | SubscribeMessageRight
    | OperationRight
    | PredicateRight

scalar RightInput

type AllowRight {
    database    : String
    description : String
}

input AllowRightInput {
    database    : String
    description : String
}

type TaskRight {
    database    : String
    types       : [TaskType!]!
    description : String
}

input TaskRightInput {
    database    : String
    types       : [TaskType!]!
    description : String
}

enum TaskType {
    read
    query
    create
    upsert
    patch
    delete
    aggregate
    message
    command
    closeCursors
    subscribeChanges
    subscribeMessage
    reserveKeys
    error
}

type SendMessageRight {
    database    : String
    names       : [String!]!
    description : String
}

input SendMessageRightInput {
    database    : String
    names       : [String!]!
    description : String
}

type SubscribeMessageRight {
    database    : String
    names       : [String!]!
    description : String
}

input SubscribeMessageRightInput {
    database    : String
    names       : [String!]!
    description : String
}

type OperationRight {
    database    : String
    containers  : Any
    description : String
}

input OperationRightInput {
    database    : String
    containers  : Any
    description : String
}

type ContainerAccess {
    operations       : [OperationType!]
    subscribeChanges : [Change!]
}

input ContainerAccessInput {
    operations       : [OperationType!]
    subscribeChanges : [Change!]
}

enum OperationType {
    create
    upsert
    delete
    deleteAll
    patch
    read
    query
    aggregate
    mutate
    full
}

enum Change {
    create
    upsert
    patch
    delete
}

type PredicateRight {
    names       : [String!]!
    description : String
}

input PredicateRightInput {
    names       : [String!]!
    description : String
}

type Credentials {
    userId : String!
    token  : String!
}

input CredentialsInput {
    userId : String!
    token  : String!
}

type AuthResult {
    isValid : Boolean!
}

input AuthResultInput {
    isValid : Boolean!
}

type DbContainers {
    id         : String!
    storage    : String!
    containers : [String!]!
}

input DbContainersInput {
    id         : String!
    storage    : String!
    containers : [String!]!
}

type DbMessages {
    id       : String!
    commands : [String!]!
    messages : [String!]!
}

input DbMessagesInput {
    id       : String!
    commands : [String!]!
    messages : [String!]!
}

type DbSchema {
    id          : String!
    schemaName  : String!
    schemaPath  : String!
    jsonSchemas : Any
}

input DbSchemaInput {
    id          : String!
    schemaName  : String!
    schemaPath  : String!
    jsonSchemas : Any
}

type DbStats {
    containers : [ContainerStats!]
}

input DbStatsInput {
    containers : [ContainerStatsInput!]
}

type ContainerStats {
    name  : String!
    count : Int!
}

input ContainerStatsInput {
    name  : String!
    count : Int!
}

type HostDetails {
    version        : String!
    hostName       : String
    projectName    : String
    projectWebsite : String
    envName        : String
    envColor       : String
    routes         : [String!]!
}

input HostDetailsInput {
    version        : String!
    hostName       : String
    projectName    : String
    projectWebsite : String
    envName        : String
    envColor       : String
    routes         : [String!]!
}

type HostCluster {
    databases : [DbContainers!]!
}

input HostClusterInput {
    databases : [DbContainersInput!]!
}

