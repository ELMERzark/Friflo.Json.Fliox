# Generated by: https://github.com/friflo/Friflo.Json.Fliox#schema

scalar String

scalar Int

scalar Float

scalar Boolean

scalar Any

type Query {
    queryContainers        (filter: String, limit: Int, maxCount: Int, cursor: String, selectAll: Boolean) : QueryContainersResult!
    queryMessages          (filter: String, limit: Int, maxCount: Int, cursor: String, selectAll: Boolean) : QueryMessagesResult!
    querySchemas           (filter: String, limit: Int, maxCount: Int, cursor: String, selectAll: Boolean) : QuerySchemasResult!
    readContainers         (ids: [String!]!, selectAll: Boolean) : [DbContainers]!
    readMessages           (ids: [String!]!, selectAll: Boolean) : [DbMessages]!
    readSchemas            (ids: [String!]!, selectAll: Boolean) : [DbSchema]!
    countContainers        (filter: String) : Int
    countMessages          (filter: String) : Int
    countSchemas           (filter: String) : Int
    ModelFiles             (param: ModelFilesQueryInput) : [ModelFiles!]!
    std_Echo               (param: Any!) : Any!
    std_Delay              (param: Int!) : Int!
    std_Containers          : DbContainers!
    std_Messages            : DbMessages!
    std_Schema              : DbSchema!
    std_Stats              (param: String) : DbStats!
    std_TransactionBegin    : TransactionResult!
    std_TransactionCommit   : TransactionResult!
    std_TransactionRollback : TransactionResult!
    std_ExecuteRawSQL      (param: RawSqlInput) : RawSqlResult!
    std_Host               (param: HostParamInput) : HostInfo!
    std_Cluster             : HostCluster!
    std_User               (param: UserParamInput) : UserResult!
    std_Client             (param: ClientParamInput) : ClientResult!
}

type QueryContainersResult {
    count  : Int!
    cursor : String
    items  : [DbContainers!]!
}

type QueryMessagesResult {
    count  : Int!
    cursor : String
    items  : [DbMessages!]!
}

type QuerySchemasResult {
    count  : Int!
    cursor : String
    items  : [DbSchema!]!
}

type EntityError {
    id      : String!
    type    : String!
    message : String!
}

type Mutation {
    createContainers(entities: [DbContainersInput!]!) : [EntityError!]
    createMessages  (entities: [DbMessagesInput!]!) : [EntityError!]
    createSchemas   (entities: [DbSchemaInput!]!) : [EntityError!]
    upsertContainers(entities: [DbContainersInput!]!) : [EntityError!]
    upsertMessages  (entities: [DbMessagesInput!]!) : [EntityError!]
    upsertSchemas   (entities: [DbSchemaInput!]!) : [EntityError!]
    deleteContainers(ids: [String!]!) : [EntityError!]
    deleteMessages  (ids: [String!]!) : [EntityError!]
    deleteSchemas   (ids: [String!]!) : [EntityError!]
}

type ClusterStore {
    containers : Any
    messages   : Any
    schemas    : Any
}

type DbContainers {
    id         : String!
    storage    : String!
    containers : [String!]!
    defaultDB  : Boolean
}

input DbContainersInput {
    id         : String!
    storage    : String!
    containers : [String!]!
    defaultDB  : Boolean
}

type DbMessages {
    id       : String!
    commands : [String!]!
    messages : [String!]!
}

input DbMessagesInput {
    id       : String!
    commands : [String!]!
    messages : [String!]!
}

type DbSchema {
    id          : String!
    schemaName  : String!
    schemaPath  : String!
    jsonSchemas : Any
}

input DbSchemaInput {
    id          : String!
    schemaName  : String!
    schemaPath  : String!
    jsonSchemas : Any
}

type ModelFilesQuery {
    db   : String
    type : String
}

input ModelFilesQueryInput {
    db   : String
    type : String
}

type ModelFiles {
    db    : String!
    type  : String!
    label : String!
    files : [ModelFile!]!
}

input ModelFilesInput {
    db    : String!
    type  : String!
    label : String!
    files : [ModelFileInput!]!
}

type ModelFile {
    path    : String!
    content : String!
}

input ModelFileInput {
    path    : String!
    content : String!
}

type DbStats {
    containers : [ContainerStats!]
}

input DbStatsInput {
    containers : [ContainerStatsInput!]
}

type ContainerStats {
    name  : String!
    count : Int!
}

input ContainerStatsInput {
    name  : String!
    count : Int!
}

type TransactionResult {
    executed : TransactionCommand!
}

input TransactionResultInput {
    executed : TransactionCommand!
}

enum TransactionCommand {
    Commit
    Rollback
}

type RawSql {
    command : String!
    schema  : Boolean
}

input RawSqlInput {
    command : String!
    schema  : Boolean
}

type RawSqlResult {
    rowCount    : Int!
    columnCount : Int!
    columns     : [RawSqlColumn!]
    data        : [[Any]!]!
}

input RawSqlResultInput {
    rowCount    : Int!
    columnCount : Int!
    columns     : [RawSqlColumnInput!]
    data        : [[Any]!]!
}

type RawSqlColumn {
    name : String
    type : RawColumnType!
}

input RawSqlColumnInput {
    name : String
    type : RawColumnType!
}

enum RawColumnType {
    Unknown
    Bool
    Uint8
    Int16
    Int32
    Int64
    String
    DateTime
    Guid
    Float
    Double
    JSON
}

type HostParam {
    memory    : Boolean
    gcCollect : Boolean
}

input HostParamInput {
    memory    : Boolean
    gcCollect : Boolean
}

type HostInfo {
    hostName       : String!
    hostVersion    : String!
    flioxVersion   : String!
    projectName    : String
    projectWebsite : String
    envName        : String
    envColor       : String
    pubSub         : Boolean!
    routes         : [String!]!
    memory         : HostMemory
}

input HostInfoInput {
    hostName       : String!
    hostVersion    : String!
    flioxVersion   : String!
    projectName    : String
    projectWebsite : String
    envName        : String
    envColor       : String
    pubSub         : Boolean!
    routes         : [String!]!
    memory         : HostMemoryInput
}

type HostMemory {
    totalAllocatedBytes : Int!
    totalMemory         : Int!
    gc                  : HostGCMemory
}

input HostMemoryInput {
    totalAllocatedBytes : Int!
    totalMemory         : Int!
    gc                  : HostGCMemoryInput
}

type HostGCMemory {
    highMemoryLoadThresholdBytes : Int!
    totalAvailableMemoryBytes    : Int!
    memoryLoadBytes              : Int!
    heapSizeBytes                : Int!
    fragmentedBytes              : Int!
}

input HostGCMemoryInput {
    highMemoryLoadThresholdBytes : Int!
    totalAvailableMemoryBytes    : Int!
    memoryLoadBytes              : Int!
    heapSizeBytes                : Int!
    fragmentedBytes              : Int!
}

type HostCluster {
    databases : [DbContainers!]!
}

input HostClusterInput {
    databases : [DbContainersInput!]!
}

type UserParam {
    addGroups    : [String!]
    removeGroups : [String!]
}

input UserParamInput {
    addGroups    : [String!]
    removeGroups : [String!]
}

type UserResult {
    roles   : [String!]!
    groups  : [String!]!
    clients : [String!]!
    counts  : [RequestCount!]!
}

input UserResultInput {
    roles   : [String!]!
    groups  : [String!]!
    clients : [String!]!
    counts  : [RequestCountInput!]!
}

type RequestCount {
    db       : String
    requests : Int!
    tasks    : Int!
}

input RequestCountInput {
    db       : String
    requests : Int!
    tasks    : Int!
}

type ClientParam {
    ensureClientId : Boolean
    queueEvents    : Boolean
}

input ClientParamInput {
    ensureClientId : Boolean
    queueEvents    : Boolean
}

type ClientResult {
    queueEvents        : Boolean!
    queuedEvents       : Int!
    clientId           : String
    subscriptionEvents : SubscriptionEvents
}

input ClientResultInput {
    queueEvents        : Boolean!
    queuedEvents       : Int!
    clientId           : String
    subscriptionEvents : SubscriptionEventsInput
}

type SubscriptionEvents {
    seq         : Int!
    queued      : Int!
    queueEvents : Boolean!
    connected   : Boolean!
    endpoint    : String
    messageSubs : [String!]
    changeSubs  : [ChangeSubscription!]
}

input SubscriptionEventsInput {
    seq         : Int!
    queued      : Int!
    queueEvents : Boolean!
    connected   : Boolean!
    endpoint    : String
    messageSubs : [String!]
    changeSubs  : [ChangeSubscriptionInput!]
}

type ChangeSubscription {
    container : String!
    changes   : [ChangeType!]!
    filter    : String
}

input ChangeSubscriptionInput {
    container : String!
    changes   : [ChangeType!]!
    filter    : String
}

enum ChangeType {
    create
    upsert
    merge
    delete
}

