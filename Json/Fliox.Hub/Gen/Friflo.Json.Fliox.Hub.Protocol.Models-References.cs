// Generated by: https://github.com/friflo/Friflo.Json.Fliox#schema
using Friflo.Json.Fliox.Mapper.Map;
using Friflo.Json.Fliox.Hub.Protocol.Models;

// ReSharper disable InconsistentNaming
namespace Gen.Friflo.Json.Fliox.Hub.Protocol.Models
{
    static class Gen_References
    {
        private const int Gen_selector = 0;
        private const int Gen_container = 1;
        private const int Gen_keyName = 2;
        private const int Gen_isIntKey = 3;
        private const int Gen_references = 4;

        private static bool ReadField (ref References obj, PropField field, ref Reader reader) {
            bool success;
            switch (field.genIndex) {
                case Gen_selector:   obj.selector   = reader.ReadString      (field, out success);  return success;
                case Gen_container:  obj.container  = reader.ReadString      (field, out success);  return success;
                case Gen_keyName:    obj.keyName    = reader.ReadString      (field, out success);  return success;
                case Gen_isIntKey:   obj.isIntKey   = reader.ReadBooleanNull (field, out success);  return success;
                case Gen_references: obj.references = reader.ReadClass       (field, obj.references, out success);  return success;
            }
            return false;
        }

        private static void Write(ref References obj, PropField[] fields, ref Writer writer, ref bool firstMember) {
            writer.WriteString      (fields[Gen_selector],   obj.selector,   ref firstMember);
            writer.WriteString      (fields[Gen_container],  obj.container,  ref firstMember);
            writer.WriteString      (fields[Gen_keyName],    obj.keyName,    ref firstMember);
            writer.WriteBooleanNull (fields[Gen_isIntKey],   obj.isIntKey,   ref firstMember);
            writer.WriteClass       (fields[Gen_references], obj.references, ref firstMember);
        }
    }
}

