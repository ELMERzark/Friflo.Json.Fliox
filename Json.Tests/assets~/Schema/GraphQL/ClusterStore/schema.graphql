# Generated by: https://github.com/friflo/Friflo.Json.Fliox#schema

scalar String

scalar Int

scalar Float

scalar Boolean

scalar Any

type Query {
    containers    (filter: String, limit: Int) : [DbContainers!]!
    messages      (filter: String, limit: Int) : [DbMessages!]!
    schemas       (filter: String, limit: Int) : [DbSchema!]!
    containersById(ids: [String!]!) : [DbContainers]!
    messagesById  (ids: [String!]!) : [DbMessages]!
    schemasById   (ids: [String!]!) : [DbSchema]!
    std_Echo      (param: Any!) : Any!
    std_Containers : DbContainers!
    std_Messages   : DbMessages!
    std_Schema     : DbSchema!
    std_Stats     (param: String) : DbStats!
    std_Details    : HostDetails!
    std_Cluster    : HostCluster!
}

type Mutation {
    createContainers(entities: [DbContainersInput!]!) : String
    createMessages  (entities: [DbMessagesInput!]!) : String
    createSchemas   (entities: [DbSchemaInput!]!) : String
}

type ClusterStore {
    containers : Any
    messages   : Any
    schemas    : Any
}

type DbContainers {
    id         : String!
    storage    : String!
    containers : [String!]!
}

input DbContainersInput {
    id         : String!
    storage    : String!
    containers : [String!]!
}

type DbMessages {
    id       : String!
    commands : [String!]!
    messages : [String!]!
}

input DbMessagesInput {
    id       : String!
    commands : [String!]!
    messages : [String!]!
}

type DbSchema {
    id          : String!
    schemaName  : String!
    schemaPath  : String!
    jsonSchemas : Any
}

input DbSchemaInput {
    id          : String!
    schemaName  : String!
    schemaPath  : String!
    jsonSchemas : Any
}

type DbStats {
    containers : [ContainerStats!]
}

input DbStatsInput {
    containers : [ContainerStatsInput!]
}

type ContainerStats {
    name  : String!
    count : Int!
}

input ContainerStatsInput {
    name  : String!
    count : Int!
}

type HostDetails {
    version        : String!
    hostName       : String
    projectName    : String
    projectWebsite : String
    envName        : String
    envColor       : String
    routes         : [String!]!
}

input HostDetailsInput {
    version        : String!
    hostName       : String
    projectName    : String
    projectWebsite : String
    envName        : String
    envColor       : String
    routes         : [String!]!
}

type HostCluster {
    databases : [DbContainers!]!
}

input HostClusterInput {
    databases : [DbContainersInput!]!
}

