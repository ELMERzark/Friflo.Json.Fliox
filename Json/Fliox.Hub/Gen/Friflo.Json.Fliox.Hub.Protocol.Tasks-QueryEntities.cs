// Generated by: https://github.com/friflo/Friflo.Json.Fliox#schema
using Friflo.Json.Fliox.Mapper.Map;
using Friflo.Json.Fliox.Hub.Protocol.Tasks;

// ReSharper disable InconsistentNaming
namespace Gen.Friflo.Json.Fliox.Hub.Protocol.Tasks
{
    static class Gen_QueryEntities
    {
        private const int Gen_info = 0;
        private const int Gen_container = 1;
        private const int Gen_keyName = 2;
        private const int Gen_isIntKey = 3;
        private const int Gen_filterTree = 4;
        private const int Gen_filter = 5;
        private const int Gen_references = 6;
        private const int Gen_limit = 7;
        private const int Gen_maxCount = 8;
        private const int Gen_cursor = 9;

        private static bool ReadField (ref QueryEntities obj, PropField field, ref Reader reader) {
            bool success;
            switch (field.genIndex) {
                case Gen_info:       obj.info       = reader.ReadJsonValue   (field, out success);  return success;
                case Gen_container:  obj.container  = reader.ReadJsonKey     (field, obj.container,  out success);  return success;
                case Gen_keyName:    obj.keyName    = reader.ReadString      (field, obj.keyName,    out success);  return success;
                case Gen_isIntKey:   obj.isIntKey   = reader.ReadBooleanNull (field, out success);  return success;
                case Gen_filterTree: obj.filterTree = reader.ReadJsonValue   (field, out success);  return success;
                case Gen_filter:     obj.filter     = reader.ReadString      (field, obj.filter,     out success);  return success;
                case Gen_references: obj.references = reader.ReadClass       (field, obj.references, out success);  return success;
                case Gen_limit:      obj.limit      = reader.ReadInt32Null   (field, out success);  return success;
                case Gen_maxCount:   obj.maxCount   = reader.ReadInt32Null   (field, out success);  return success;
                case Gen_cursor:     obj.cursor     = reader.ReadString      (field, obj.cursor,     out success);  return success;
            }
            return false;
        }

        private static void Write(ref QueryEntities obj, PropField[] fields, ref Writer writer, ref bool firstMember) {
            writer.WriteJsonValue   (fields[Gen_info],       obj.info,       ref firstMember);
            writer.WriteJsonKey     (fields[Gen_container],  obj.container,  ref firstMember);
            writer.WriteString      (fields[Gen_keyName],    obj.keyName,    ref firstMember);
            writer.WriteBooleanNull (fields[Gen_isIntKey],   obj.isIntKey,   ref firstMember);
            writer.WriteJsonValue   (fields[Gen_filterTree], obj.filterTree, ref firstMember);
            writer.WriteString      (fields[Gen_filter],     obj.filter,     ref firstMember);
            writer.WriteClass       (fields[Gen_references], obj.references, ref firstMember);
            writer.WriteInt32Null   (fields[Gen_limit],      obj.limit,      ref firstMember);
            writer.WriteInt32Null   (fields[Gen_maxCount],   obj.maxCount,   ref firstMember);
            writer.WriteString      (fields[Gen_cursor],     obj.cursor,     ref firstMember);
        }
    }
}

