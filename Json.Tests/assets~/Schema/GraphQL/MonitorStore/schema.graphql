# Generated by: https://github.com/friflo/Friflo.Json.Fliox#schema

scalar String

scalar Int

scalar Float

scalar Boolean

scalar Any

type Query {
    hosts         (filter: String, limit: Int) : [HostHits!]!
    users         (filter: String, limit: Int) : [UserHits!]!
    clients       (filter: String, limit: Int) : [ClientHits!]!
    histories     (filter: String, limit: Int) : [HistoryHits!]!
    hostsById     (ids: [String!]!) : [HostHits]!
    usersById     (ids: [String!]!) : [UserHits]!
    clientsById   (ids: [String!]!) : [ClientHits]!
    historiesById (ids: [String!]!) : [HistoryHits]!
    ClearStats    (param: ClearStatsInput) : ClearStatsResult!
    std_Echo      (param: Any!) : Any!
    std_Containers : DbContainers!
    std_Messages   : DbMessages!
    std_Schema     : DbSchema!
    std_Stats     (param: String) : DbStats!
    std_Details    : HostDetails!
    std_Cluster    : HostCluster!
}

type Mutation {
    createHosts    (entities: [HostHitsInput!]!) : String
    createUsers    (entities: [UserHitsInput!]!) : String
    createClients  (entities: [ClientHitsInput!]!) : String
    createHistories(entities: [HistoryHitsInput!]!) : String
}

type MonitorStore {
    hosts     : Any
    users     : Any
    clients   : Any
    histories : Any
}

type HostHits {
    id     : String!
    counts : RequestCount!
}

input HostHitsInput {
    id     : String!
    counts : RequestCountInput!
}

type UserHits {
    id      : String!
    clients : [String!]!
    counts  : [RequestCount!]
}

input UserHitsInput {
    id      : String!
    clients : [String!]!
    counts  : [RequestCountInput!]
}

type ClientHits {
    id     : String!
    user   : String!
    counts : [RequestCount!]
    event  : EventDelivery
}

input ClientHitsInput {
    id     : String!
    user   : String!
    counts : [RequestCountInput!]
    event  : EventDeliveryInput
}

type HistoryHits {
    id         : Int!
    counters   : [Int!]!
    lastUpdate : Int!
}

input HistoryHitsInput {
    id         : Int!
    counters   : [Int!]!
    lastUpdate : Int!
}

type RequestCount {
    db       : String
    requests : Int!
    tasks    : Int!
}

input RequestCountInput {
    db       : String
    requests : Int!
    tasks    : Int!
}

type EventDelivery {
    seq         : Int!
    queued      : Int!
    messageSubs : [String!]
    changeSubs  : [ChangeSubscription!]
}

input EventDeliveryInput {
    seq         : Int!
    queued      : Int!
    messageSubs : [String!]
    changeSubs  : [ChangeSubscriptionInput!]
}

type ChangeSubscription {
    container : String!
    changes   : [Change!]!
    filter    : String
}

input ChangeSubscriptionInput {
    container : String!
    changes   : [Change!]!
    filter    : String
}

enum Change {
    create
    upsert
    patch
    delete
}

type ClearStats {
}

input ClearStatsInput {
}

type ClearStatsResult {
}

input ClearStatsResultInput {
}

type DbContainers {
    id         : String!
    storage    : String!
    containers : [String!]!
}

input DbContainersInput {
    id         : String!
    storage    : String!
    containers : [String!]!
}

type DbMessages {
    id       : String!
    commands : [String!]!
    messages : [String!]!
}

input DbMessagesInput {
    id       : String!
    commands : [String!]!
    messages : [String!]!
}

type DbSchema {
    id          : String!
    schemaName  : String!
    schemaPath  : String!
    jsonSchemas : Any
}

input DbSchemaInput {
    id          : String!
    schemaName  : String!
    schemaPath  : String!
    jsonSchemas : Any
}

type DbStats {
    containers : [ContainerStats!]
}

input DbStatsInput {
    containers : [ContainerStatsInput!]
}

type ContainerStats {
    name  : String!
    count : Int!
}

input ContainerStatsInput {
    name  : String!
    count : Int!
}

type HostDetails {
    version        : String!
    hostName       : String
    projectName    : String
    projectWebsite : String
    envName        : String
    envColor       : String
    routes         : [String!]!
}

input HostDetailsInput {
    version        : String!
    hostName       : String
    projectName    : String
    projectWebsite : String
    envName        : String
    envColor       : String
    routes         : [String!]!
}

type HostCluster {
    databases : [DbContainers!]!
}

input HostClusterInput {
    databases : [DbContainersInput!]!
}

