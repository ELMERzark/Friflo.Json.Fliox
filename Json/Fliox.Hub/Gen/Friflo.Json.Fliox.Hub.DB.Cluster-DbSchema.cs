// Generated by: https://github.com/friflo/Friflo.Json.Fliox#schema
using Friflo.Json.Fliox.Mapper.Map;
using Friflo.Json.Fliox.Hub.DB.Cluster;

// ReSharper disable InconsistentNaming
namespace Gen.Friflo.Json.Fliox.Hub.DB.Cluster
{
    static class Gen_DbSchema
    {
        private const int Gen_id = 0;
        private const int Gen_schemaName = 1;
        private const int Gen_schemaPath = 2;
        private const int Gen_jsonSchemas = 3;

        private static bool ReadField (ref DbSchema obj, PropField field, ref Reader reader) {
            bool success;
            switch (field.genIndex) {
                case Gen_id:          obj.id          = reader.ReadString (field, obj.id,          out success);  return success;
                case Gen_schemaName:  obj.schemaName  = reader.ReadString (field, obj.schemaName,  out success);  return success;
                case Gen_schemaPath:  obj.schemaPath  = reader.ReadString (field, obj.schemaPath,  out success);  return success;
                case Gen_jsonSchemas: obj.jsonSchemas = reader.ReadClass (field, obj.jsonSchemas, out success);  return success;
            }
            return false;
        }

        private static void Write(ref DbSchema obj, PropField[] fields, ref Writer writer, ref bool firstMember) {
            writer.WriteString (fields[Gen_id],          obj.id,          ref firstMember);
            writer.WriteString (fields[Gen_schemaName],  obj.schemaName,  ref firstMember);
            writer.WriteString (fields[Gen_schemaPath],  obj.schemaPath,  ref firstMember);
            writer.WriteClass (fields[Gen_jsonSchemas], obj.jsonSchemas, ref firstMember);
        }
    }
}

