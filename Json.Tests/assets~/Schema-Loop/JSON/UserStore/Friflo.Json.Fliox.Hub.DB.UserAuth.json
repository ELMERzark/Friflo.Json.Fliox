{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$comment": "Generated by: https://github.com/friflo/Friflo.Json.Fliox#schema",
    "definitions": {
        "UserStore": {
            "type": "object",
            "isAbstract": true,
            "description": "Control individual user access to database containers and commands. <br/>\nEach <b>user</b> has a set of <b>roles</b> stored in container <b>permissions</b>. <br/>\nEach <b>role</b> in container <b>roles</b> has a set of <b>rights</b> which grant or deny container access or command execution.",
            "properties": {
                "credentials": { "additionalProperties": { "$ref": "./Friflo.Json.Fliox.Hub.DB.UserAuth.UserCredential.json#/definitions/UserCredential" }, "type": "object" },
                "permissions": { "additionalProperties": { "$ref": "./Friflo.Json.Fliox.Hub.DB.UserAuth.UserPermission.json#/definitions/UserPermission" }, "type": "object" },
                "roles":       { "additionalProperties": { "$ref": "./Friflo.Json.Fliox.Hub.DB.UserAuth.Role.json#/definitions/Role" }, "type": "object" },
                "targets":     { "additionalProperties": { "$ref": "./Friflo.Json.Fliox.Hub.DB.UserAuth.UserTarget.json#/definitions/UserTarget" }, "type": "object" }
            },
            "required": [
                "credentials",
                "permissions",
                "roles",
                "targets"
            ],
            "additionalProperties": false,
            "commands": {
                "AuthenticateUser":     { "param": { "oneOf": [{ "$ref": "#/definitions/Credentials" }, {"type": "null"}] }, "result": { "$ref": "#/definitions/AuthResult" },
                    "description": "authenticate user <b>Credentials</b>: <b>userId</b> and <b>token</b>" },
                "ValidateUserDb":       { "result": { "$ref": "#/definitions/ValidateUserDbResult" } },
                "ClearAuthCache":       { "result": { "type": "boolean" } },
                "std.Echo":             { "param": {  }, "result": {  },
                    "description": "Echos the given parameter to assure the database is working appropriately." },
                "std.Delay":            { "param": { "$ref": "./Standard.json#/definitions/int32" }, "result": { "$ref": "./Standard.json#/definitions/int32" },
                    "description": "A command that completes after a specified number of milliseconds." },
                "std.Containers":       { "result": { "$ref": "./Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/DbContainers" },
                    "description": "List all database containers" },
                "std.Messages":         { "result": { "$ref": "./Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/DbMessages" },
                    "description": "List all database commands and messages" },
                "std.Schema":           { "result": { "$ref": "./Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/DbSchema" },
                    "description": "Return the Schema assigned to the database" },
                "std.Stats":            { "param": { "type": ["string", "null"] }, "result": { "$ref": "./Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/DbStats" },
                    "description": "Return the number of entities of all containers (or the given container) of the database" },
                "std.TransactionBegin": { "result": { "$ref": "./Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/TransactionResult" },
                    "description": "Starts a transaction containing all subsequent <b>SyncTask</b>'s" },
                "std.TransactionEnd":   { "param": { "oneOf": [{ "$ref": "./Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/TransactionEnd" }, {"type": "null"}] }, "result": { "$ref": "./Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/TransactionResult" },
                    "description": "Ends a transaction started previously with <b>TransactionBegin</b>" },
                "std.Host":             { "param": { "oneOf": [{ "$ref": "./Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/HostParam" }, {"type": "null"}] }, "result": { "$ref": "./Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/HostInfo" },
                    "description": "Returns general information about the Hub like version, host, project and environment name" },
                "std.Cluster":          { "result": { "$ref": "./Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/HostCluster" },
                    "description": "List all databases and their containers hosted by the Hub" },
                "std.User":             { "param": { "oneOf": [{ "$ref": "./Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/UserParam" }, {"type": "null"}] }, "result": { "$ref": "./Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/UserResult" },
                    "description": "Return the groups of the current user. Optionally change the groups of the current user" },
                "std.Client":           { "param": { "oneOf": [{ "$ref": "./Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/ClientParam" }, {"type": "null"}] }, "result": { "$ref": "./Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/ClientResult" },
                    "description": "Return client specific infos and adjust general client behavior like <b>queueEvents</b>" }
            }
        },
        "Credentials": {
            "type": "object",
            "description": "user <b>Credentials</b> used for authentication",
            "properties": {
                "userId": { "type": "string" },
                "token":  { "type": "string" }
            },
            "required": [
                "userId",
                "token"
            ],
            "additionalProperties": false
        },
        "AuthResult": {
            "type": "object",
            "description": "Result of <b>AuthenticateUser()</b> command",
            "properties": {
                "isValid": { "type": "boolean", "description": "true if authentication was successful" }
            },
            "required": [
                "isValid"
            ],
            "additionalProperties": false
        },
        "ValidateUserDbResult": {
            "type": "object",
            "properties": {
                "errors": { "type": ["array", "null"], "items": { "type": "string" } }
            },
            "additionalProperties": false
        }
    }
}

