
# Example requests bellow send to GraphServer in ./Main/Program.cs 
#
# Hint:
# use with [REST Client - Visual Studio Marketplace] https://marketplace.visualstudio.com/items?itemName=humao.rest-client

### send message to host
# "Echo" is known at host as a command message. It simply echos the given value.
POST http://localhost:8010/ HTTP/1.1
content-type: application/json

{ "type": "sync",
  "tasks": [
  {
    "task":  "message",
    "name":  "Echo",
    "value": "some value"
  }
]}


# =============================== read / query tasks ===============================

### read entities by their ids
POST http://localhost:8010/ HTTP/1.1
content-type: application/json

{ "type": "sync",
  "tasks": [
  {
    "task":         "read",
    "container":    "articles",
    "reads": [
      { "ids": ["article-galaxy", "article-ipad"] }
    ]
  }
]}

### read entity "order-1" and its reference to .customer
POST http://localhost:8010/ HTTP/1.1
content-type: application/json

{ "type": "sync",
  "tasks": [
  {
    "task":         "read",
    "container":    "orders",
    "reads": [
      {
        "ids": ["order-1"],
        "references": [
          {
            "selector": ".customer",
            "container": "customers"
          }
        ]
      }
    ]
  }
]}

### query all articles -> "filter": { "op":"true" }
POST http://localhost:8010/ HTTP/1.1
content-type: application/json

{ "type": "sync",
  "tasks": [
  {
    "task":         "query",
    "container":    "articles",
    "filterLinq":   "true",
    "filter":       { "op":"true" }
  }
]}


### query articles with a filter => .name == "Smartphone"
POST http://localhost:8010/ HTTP/1.1
content-type: application/json

{ "type": "sync",
  "tasks": [
  {
    "task":         "query",
    "container":    "articles",
    "filterLinq":   "true",
    "filter": {"op":"equal", "left": {"op":"field",  "name":  ".name"},
                             "right":{"op":"string", "value": "Smartphone"}}
  }
]}


### query all articles, their referenced .producer (and the .employees[*] referenced by .producer)
POST http://localhost:8010/ HTTP/1.1
content-type: application/json

{ "type": "sync",
  "tasks": [
  {
    "task":         "query",
    "container":    "articles",
    "filterLinq":   "true",
    "filter":       { "op":"true" },
    "references": [
      {
        "selector": ".producer",
        "container": "producers",
        "references": [
          {
            "selector": ".employees[*]",
            "container": "employees"
          }
        ]
      }
    ]
  }
]}


### Get database schema
GET http://localhost:8010/schema/index.html HTTP/1.1


# =============================== mutate tasks ===============================

### create an article - creates file ./Json.Tests/assets~/db/articles/new-article.json
POST http://localhost:8010/ HTTP/1.1
content-type: application/json

{ "type": "sync",
  "tasks": [
  {
    "task":         "create",
    "container":    "articles",
    "key":          "id",
    "entities": [
        { "id": "new-article","name":"New Article S10"}
    ]
  }
]}

### delete an article
POST http://localhost:8010/ HTTP/1.1
content-type: application/json

{ "type": "sync",
  "tasks": [
  {
    "task":         "delete",
    "container":    "articles",
    "ids": ["new-article"]
  }
]}

### patch article member .name (article need to be present)
POST http://localhost:8010/ HTTP/1.1
content-type: application/json

{ "type": "sync",
  "tasks": [
  {
    "task":         "patch",
    "container":    "articles",
    "patches": {
      "new-article": {
        "patches": [
          {
            "op":"replace",
            "path": ".name",
            "value": "patched Name"
          }
        ]
      }
    }
  }
]}

### Reserve keys for container: articles
POST http://localhost:8010/ HTTP/1.1
content-type: application/json

{ "type": "sync",
  "tasks": [
  {
    "task":         "reserveKeys",
    "container":    "articles",
    "count":        10
  }
]}

### create an article using reserved keys. The "reservedToken" is used to proof the keys were reserved before.
# This ensures no other client is able to create entities by using reserved keys.
POST http://localhost:8010/ HTTP/1.1
content-type: application/json

{ "type": "sync",
  "tasks": [
  {
    "task":         "create",
    "container":    "articles",
    "reservedToken":"00000000-0000-0000-0000-000000000000",
    "key":          "id",
    "entities": [
        { "id": "new-article","name":"New Article S10"}
    ]
  }
]}


# =============================== WebSocket only tasks ===============================

### subscribe to all ("*") messages - run only for WebSocket; fails for HTTP POST
# Filter all messages matching to "name".
# "name": "*"                  => subscribe all message events.
# "name": "*", "remove": true  => unsubscribe all message events
POST http://localhost:8010/ HTTP/1.1
content-type: application/json

{ "type":   "sync",
  "client": "client-1",
  "tasks": [{
    "task":     "subscribeMessage",
    "name":     "*",
    "remove":   false
  }
]}

### subscribe to database changes - run only for WebSocket; fails for HTTP POST
POST http://localhost:8010/ HTTP/1.1
content-type: application/json

{ "type":   "sync",
  "client": "client-1",
  "tasks": [{
    "task":         "subscribeChanges",
    "container":    "articles", 
    "changes": ["create", "upsert", "delete", "patch"]
  }
]}

### acknowledge received events - run only for WebSocket
# "ack": N => starts resending all buffered events with "seq" > N to the client and remove events with "seq" <= N.
POST http://localhost:8010/ HTTP/1.1
content-type: application/json

{ "type":   "sync",
  "ack":    0,
  "client": "client-1",
  "tasks": []
}


