
# use with: [REST Client - Visual Studio Marketplace] https://marketplace.visualstudio.com/items?itemName=humao.rest-client

### read entities by their ids
POST http://localhost:8081/ HTTP/1.1
content-type: application/json

{ "tasks": [
    {
		"task":"read",	"container": "Article",
		"reads": [
			{ "ids": ["article-galaxy", "article-ipad"] }
		]
	}
] }

### simple echo task
POST http://localhost:8081/ HTTP/1.1
content-type: application/json

{ "tasks": [
	{
		"task":"echo",
		"message": "Hello"		
	}
] }

### read entity "order-1" and its referenced .customer
POST http://localhost:8081/ HTTP/1.1
content-type: application/json

{ "tasks": [
	{
        "task":"read",   "container": "Order",
        "reads": [ {
                "ids": ["order-1"],
                "references": [
                    {
                        "selector": ".customer",
                        "container": "Customer"
                    }
                ]
            }
        ]
    }
] }

### query all articles -> "filter": { "op":"true" }
POST http://localhost:8081/ HTTP/1.1
content-type: application/json

{ "tasks": [
	{
        "task":"query",        "container": "Article",
        "filterLinq": "true",
        "filter": { "op":"true" }
    }
] }


### query articles with => .name == "Smartphone"
POST http://localhost:8081/ HTTP/1.1
content-type: application/json

{ "tasks": [
	{
        "task":"query",        "container": "Article",
        "filterLinq": "true",
        "filter": {"op":"equal", "left": {"op":"field",  "name":  ".name"},
                                 "right":{"op":"string", "value": "Smartphone"}}
    }
] }


### query all articles, their referenced .producer (and .employees[*] referenced by .producer)
POST http://localhost:8081/ HTTP/1.1
content-type: application/json

{ "tasks": [
	{
        "task":"query",        "container": "Article",
        "filterLinq": "true",
        "filter": { "op":"true" },
        "references": [
            {
                "selector": ".producer",
                "container": "Producer",
                "references": [
                    {
                        "selector": ".employees[*]",
                        "container": "Employee"
                    }
                ]
            }
        ]
    }
] }

### create an article - creates file ./Json.Tests/assets/db/Article/new-article.json
POST http://localhost:8081/ HTTP/1.1
content-type: application/json

{ "tasks": [
	{
        "task":"create",   "container": "Article",
        "entities": {
            "new-article": {
                "value": {"id": "new-article","name":"New Article S10"}
            }
        }
    }
] }

### delete an article
POST http://localhost:8081/ HTTP/1.1
content-type: application/json

{ "tasks": [
	{
        "task":"delete",     "container": "Article",
        "ids": ["new-article"]
    }
] }

### patch article member .name (article need to be present)
POST http://localhost:8081/ HTTP/1.1
content-type: application/json

{ "tasks": [
	{
        "task":"patch",        "container": "Article",
        "patches": {
            "new-article": {
                "patches": [
                    {
                        "op":"replace",
                        "path": ".name",
                        "value": "pachted Name"
                    }
                ]
            }
        }
    }
] }