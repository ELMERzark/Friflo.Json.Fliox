// Generated by: https://github.com/friflo/Friflo.Json.Flow/tree/main/Json/Flow/Schema
import { FilterOperation } from "./Friflo.Json.Flow.Transform"
import { FilterOperation_Union } from "./Friflo.Json.Flow.Transform"
import { Operation }       from "./Friflo.Json.Flow.Transform"
import { Operation_Union }       from "./Friflo.Json.Flow.Transform"
import { double }          from "./Standard"
import { int64 }           from "./Standard"

export abstract class BinaryBoolOp extends FilterOperation {
    left   : Operation_Union;
    right  : Operation_Union;
}

export class Equal extends BinaryBoolOp {
    op     : "equal";
}

export class Field extends Operation {
    op    : "field";
    name  : string;
}

export abstract class Literal extends Operation {
}

export class StringLiteral extends Literal {
    op     : "string";
    value  : string;
}

export class DoubleLiteral extends Literal {
    op     : "double";
    value  : double;
}

export class LongLiteral extends Literal {
    op     : "int64";
    value  : int64;
}

export class NullLiteral extends Literal {
    op  : "null";
}

export abstract class UnaryArithmeticOp extends Operation {
    value  : Operation_Union;
}

export class Abs extends UnaryArithmeticOp {
    op     : "abs";
}

export class Ceiling extends UnaryArithmeticOp {
    op     : "ceiling";
}

export class Floor extends UnaryArithmeticOp {
    op     : "floor";
}

export class Exp extends UnaryArithmeticOp {
    op     : "exp";
}

export class Log extends UnaryArithmeticOp {
    op     : "log";
}

export class Sqrt extends UnaryArithmeticOp {
    op     : "sqrt";
}

export class Negate extends UnaryArithmeticOp {
    op     : "negate";
}

export abstract class BinaryArithmeticOp extends Operation {
    left   : Operation_Union;
    right  : Operation_Union;
}

export class Add extends BinaryArithmeticOp {
    op     : "add";
}

export class Subtract extends BinaryArithmeticOp {
    op     : "subtract";
}

export class Multiply extends BinaryArithmeticOp {
    op     : "multiply";
}

export class Divide extends BinaryArithmeticOp {
    op     : "divide";
}

export abstract class BinaryAggregateOp extends Operation {
    field  : Field;
    arg    : string;
    array  : Operation_Union;
}

export class Min extends BinaryAggregateOp {
    op     : "min";
}

export class Max extends BinaryAggregateOp {
    op     : "max";
}

export class Sum extends BinaryAggregateOp {
    op     : "sum";
}

export class Average extends BinaryAggregateOp {
    op     : "average";
}

export abstract class UnaryAggregateOp extends Operation {
    field  : Field;
}

export class Count extends UnaryAggregateOp {
    op     : "count";
}

export class NotEqual extends BinaryBoolOp {
    op     : "notEqual";
}

export class LessThan extends BinaryBoolOp {
    op     : "lessThan";
}

export class LessThanOrEqual extends BinaryBoolOp {
    op     : "lessThanOrEqual";
}

export class GreaterThan extends BinaryBoolOp {
    op     : "greaterThan";
}

export class GreaterThanOrEqual extends BinaryBoolOp {
    op     : "greaterThanOrEqual";
}

export abstract class BinaryLogicalOp extends FilterOperation {
    operands  : FilterOperation_Union[];
}

export class And extends BinaryLogicalOp {
    op        : "and";
}

export class Or extends BinaryLogicalOp {
    op        : "or";
}

export class TrueLiteral extends FilterOperation {
    op  : "true";
}

export class FalseLiteral extends FilterOperation {
    op  : "false";
}

export abstract class UnaryLogicalOp extends FilterOperation {
    operand  : FilterOperation_Union;
}

export class Not extends UnaryLogicalOp {
    op       : "not";
}

export abstract class BinaryQuantifyOp extends FilterOperation {
    field      : Field;
    arg        : string;
    predicate  : FilterOperation_Union;
}

export class Any extends BinaryQuantifyOp {
    op         : "any";
}

export class All extends BinaryQuantifyOp {
    op         : "all";
}

export class Contains extends BinaryBoolOp {
    op     : "contains";
}

export class StartsWith extends BinaryBoolOp {
    op     : "startsWith";
}

export class EndsWith extends BinaryBoolOp {
    op     : "endsWith";
}

