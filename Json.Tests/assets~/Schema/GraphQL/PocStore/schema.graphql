# Generated by: https://github.com/friflo/Friflo.Json.Fliox#schema

# version:        1.0.0
# termsOfService: https://github.com/friflo/Friflo.Json.Fliox
# contactName:    Ullrich Praetz
# contactUrl:     https://github.com/friflo/Friflo.Json.Fliox/issues

scalar String

scalar Int

scalar Float

scalar Boolean

scalar Any

type Query {
    queryOrders                   (filter: String, limit: Int, maxCount: Int, cursor: String, selectAll: Boolean) : QueryOrdersResult!
    queryCustomers                (filter: String, limit: Int, maxCount: Int, cursor: String, selectAll: Boolean) : QueryCustomersResult!
    queryArticles                 (filter: String, limit: Int, maxCount: Int, cursor: String, selectAll: Boolean) : QueryArticlesResult!
    queryArticles2                (filter: String, limit: Int, maxCount: Int, cursor: String, selectAll: Boolean) : QueryArticles2Result!
    queryProducers                (filter: String, limit: Int, maxCount: Int, cursor: String, selectAll: Boolean) : QueryProducersResult!
    queryEmployees                (filter: String, limit: Int, maxCount: Int, cursor: String, selectAll: Boolean) : QueryEmployeesResult!
    queryTypes                    (filter: String, limit: Int, maxCount: Int, cursor: String, selectAll: Boolean) : QueryTypesResult!
    queryKeyName                  (filter: String, limit: Int, maxCount: Int, cursor: String, selectAll: Boolean) : QueryKeyNameResult!
    readOrders                    (ids: [String!]!, selectAll: Boolean) : [Order]!
    readCustomers                 (ids: [String!]!, selectAll: Boolean) : [Customer]!
    readArticles                  (ids: [String!]!, selectAll: Boolean) : [Article]!
    readArticles2                 (ids: [String!]!, selectAll: Boolean) : [Article]!
    readProducers                 (ids: [String!]!, selectAll: Boolean) : [Producer]!
    readEmployees                 (ids: [String!]!, selectAll: Boolean) : [Employee]!
    readTypes                     (ids: [String!]!, selectAll: Boolean) : [TestType]!
    readKeyName                   (ids: [String!]!, selectAll: Boolean) : [TestKeyName]!
    countOrders                   (filter: String) : Int
    countCustomers                (filter: String) : Int
    countArticles                 (filter: String) : Int
    countArticles2                (filter: String) : Int
    countProducers                (filter: String) : Int
    countEmployees                (filter: String) : Int
    countTypes                    (filter: String) : Int
    countKeyName                  (filter: String) : Int
    TestCommand                   (param: TestCommandInput) : Boolean!
    MultiRequests                 (param: Int) : Int!
    SyncCommand                   (param: String) : String!
    AsyncCommand                  (param: String) : String!
    Command1                       : String!
    CommandInt                    (param: Int!) : Int!
    CommandIntArray               (param: [Int!]) : [Int!]!
    CommandClassArray             (param: [ArticleInput!]) : [Article!]!
    test_Command2                  : String!
    test_CommandHello             (param: String) : String!
    test_CommandExecutionError     : Int!
    test_CommandExecutionException : Int!
    std_Echo                      (param: Any!) : Any!
    std_Delay                     (param: Int!) : Int!
    std_Containers                 : DbContainers!
    std_Messages                   : DbMessages!
    std_Schema                     : DbSchema!
    std_Stats                     (param: String) : DbStats!
    std_TransactionBegin           : TransactionResult!
    std_TransactionCommit          : TransactionResult!
    std_TransactionRollback        : TransactionResult!
    std_ExecuteRawSQL             (param: RawSqlInput) : RawSqlResult!
    std_Host                      (param: HostParamInput) : HostInfo!
    std_Cluster                    : HostCluster!
    std_User                      (param: UserParamInput) : UserResult!
    std_Client                    (param: ClientParamInput) : ClientResult!
    Message1                      (param: String) : Any
    AsyncMessage                  (param: String) : Any
    StartTime                     (param: String!) : Any
    StopTime                      (param: String!) : Any
    test_Message2                 (param: String) : Any
    test_AsyncMessage3            (param: String) : Any
}

type QueryOrdersResult {
    count  : Int!
    cursor : String
    items  : [Order!]!
}

type QueryCustomersResult {
    count  : Int!
    cursor : String
    items  : [Customer!]!
}

type QueryArticlesResult {
    count  : Int!
    cursor : String
    items  : [Article!]!
}

type QueryArticles2Result {
    count  : Int!
    cursor : String
    items  : [Article!]!
}

type QueryProducersResult {
    count  : Int!
    cursor : String
    items  : [Producer!]!
}

type QueryEmployeesResult {
    count  : Int!
    cursor : String
    items  : [Employee!]!
}

type QueryTypesResult {
    count  : Int!
    cursor : String
    items  : [TestType!]!
}

type QueryKeyNameResult {
    count  : Int!
    cursor : String
    items  : [TestKeyName!]!
}

type EntityError {
    id      : String!
    type    : String!
    message : String!
}

type Mutation {
    createOrders   (entities: [OrderInput!]!) : [EntityError!]
    createCustomers(entities: [CustomerInput!]!) : [EntityError!]
    createArticles (entities: [ArticleInput!]!) : [EntityError!]
    createArticles2(entities: [ArticleInput!]!) : [EntityError!]
    createProducers(entities: [ProducerInput!]!) : [EntityError!]
    createEmployees(entities: [EmployeeInput!]!) : [EntityError!]
    createTypes    (entities: [TestTypeInput!]!) : [EntityError!]
    createKeyName  (entities: [TestKeyNameInput!]!) : [EntityError!]
    upsertOrders   (entities: [OrderInput!]!) : [EntityError!]
    upsertCustomers(entities: [CustomerInput!]!) : [EntityError!]
    upsertArticles (entities: [ArticleInput!]!) : [EntityError!]
    upsertArticles2(entities: [ArticleInput!]!) : [EntityError!]
    upsertProducers(entities: [ProducerInput!]!) : [EntityError!]
    upsertEmployees(entities: [EmployeeInput!]!) : [EntityError!]
    upsertTypes    (entities: [TestTypeInput!]!) : [EntityError!]
    upsertKeyName  (entities: [TestKeyNameInput!]!) : [EntityError!]
    deleteOrders   (ids: [String!]!) : [EntityError!]
    deleteCustomers(ids: [String!]!) : [EntityError!]
    deleteArticles (ids: [String!]!) : [EntityError!]
    deleteArticles2(ids: [String!]!) : [EntityError!]
    deleteProducers(ids: [String!]!) : [EntityError!]
    deleteEmployees(ids: [String!]!) : [EntityError!]
    deleteTypes    (ids: [String!]!) : [EntityError!]
    deleteKeyName  (ids: [String!]!) : [EntityError!]
}

type PocStore {
    orders    : Any
    customers : Any
    articles  : Any
    articles2 : Any
    producers : Any
    employees : Any
    types     : Any
    keyName   : Any
}

type Order {
    id       : String!
    customer : String
    created  : String!
    items    : [OrderItem!]
}

input OrderInput {
    id       : String!
    customer : String
    created  : String!
    items    : [OrderItemInput!]
}

type Customer {
    id   : String!
    name : String!
}

input CustomerInput {
    id   : String!
    name : String!
}

type Article {
    id       : String!
    name     : String!
    producer : String
}

input ArticleInput {
    id       : String!
    name     : String!
    producer : String
}

type Producer {
    id        : String!
    name      : String!
    employees : [String!]
}

input ProducerInput {
    id        : String!
    name      : String!
    employees : [String!]
}

type Employee {
    id        : String!
    firstName : String!
    lastName  : String
}

input EmployeeInput {
    id        : String!
    firstName : String!
    lastName  : String
}

type TestType {
    id               : String!
    dateTime         : String!
    dateTimeNull     : String
    bigInt           : String!
    bigIntNull       : String
    boolean          : Boolean!
    booleanNull      : Boolean
    uint8            : Int!
    uint8Null        : Int
    int16            : Int!
    int16Null        : Int
    int32            : Int!
    int32Null        : Int
    int64            : Int!
    int64Null        : Int
    float32          : Float!
    float32Null      : Float
    float64          : Float!
    float64Null      : Float
    pocStruct        : PocStruct!
    pocStructNull    : PocStruct
    intArray         : [Int!]!
    intArrayNull     : [Int!]
    intNullArray     : [Int]
    jsonValue        : Any
    derivedClass     : DerivedClass!
    derivedClassNull : DerivedClass
    testEnum         : TestEnum!
    testEnumNull     : TestEnum
}

input TestTypeInput {
    id               : String!
    dateTime         : String!
    dateTimeNull     : String
    bigInt           : String!
    bigIntNull       : String
    boolean          : Boolean!
    booleanNull      : Boolean
    uint8            : Int!
    uint8Null        : Int
    int16            : Int!
    int16Null        : Int
    int32            : Int!
    int32Null        : Int
    int64            : Int!
    int64Null        : Int
    float32          : Float!
    float32Null      : Float
    float64          : Float!
    float64Null      : Float
    pocStruct        : PocStructInput!
    pocStructNull    : PocStructInput
    intArray         : [Int!]!
    intArrayNull     : [Int!]
    intNullArray     : [Int]
    jsonValue        : Any
    derivedClass     : DerivedClassInput!
    derivedClassNull : DerivedClassInput
    testEnum         : TestEnum!
    testEnumNull     : TestEnum
}

type TestKeyName {
    testId : String!
    value  : String
}

input TestKeyNameInput {
    testId : String!
    value  : String
}

type OrderItem {
    article : String!
    amount  : Int!
    name    : String
}

input OrderItemInput {
    article : String!
    amount  : Int!
    name    : String
}

type PocEntity {
    id : String!
}

input PocEntityInput {
    id : String!
}

type PocStruct {
    value : Int!
}

input PocStructInput {
    value : Int!
}

type DerivedClass {
    article    : String!
    amount     : Int!
    name       : String
    derivedVal : Int!
}

input DerivedClassInput {
    article    : String!
    amount     : Int!
    name       : String
    derivedVal : Int!
}

enum TestEnum {
    NONE
    e1
    e2
}

type TestCommand {
    text : String
}

input TestCommandInput {
    text : String
}

type DbContainers {
    id         : String!
    storage    : String!
    containers : [String!]!
    defaultDB  : Boolean
}

input DbContainersInput {
    id         : String!
    storage    : String!
    containers : [String!]!
    defaultDB  : Boolean
}

type DbMessages {
    id       : String!
    commands : [String!]!
    messages : [String!]!
}

input DbMessagesInput {
    id       : String!
    commands : [String!]!
    messages : [String!]!
}

type DbSchema {
    id          : String!
    schemaName  : String!
    schemaPath  : String!
    jsonSchemas : Any
}

input DbSchemaInput {
    id          : String!
    schemaName  : String!
    schemaPath  : String!
    jsonSchemas : Any
}

type DbStats {
    containers : [ContainerStats!]
}

input DbStatsInput {
    containers : [ContainerStatsInput!]
}

type ContainerStats {
    name  : String!
    count : Int!
}

input ContainerStatsInput {
    name  : String!
    count : Int!
}

type TransactionResult {
    executed : TransactionCommand!
}

input TransactionResultInput {
    executed : TransactionCommand!
}

enum TransactionCommand {
    Commit
    Rollback
}

type RawSql {
    command : String!
    schema  : Boolean
}

input RawSqlInput {
    command : String!
    schema  : Boolean
}

type RawSqlResult {
    rowCount    : Int!
    columnCount : Int!
    columns     : [RawSqlColumn!]
    data        : JsonTable
}

input RawSqlResultInput {
    rowCount    : Int!
    columnCount : Int!
    columns     : [RawSqlColumnInput!]
    data        : JsonTableInput
}

type RawSqlColumn {
    name : String
    type : RawColumnType!
}

input RawSqlColumnInput {
    name : String
    type : RawColumnType!
}

enum RawColumnType {
    Unknown
    Bool
    Uint8
    Int16
    Int32
    Int64
    String
    DateTime
    Guid
    Float
    Double
    JSON
}

type HostParam {
    memory    : Boolean
    gcCollect : Boolean
}

input HostParamInput {
    memory    : Boolean
    gcCollect : Boolean
}

type HostInfo {
    hostName       : String!
    hostVersion    : String!
    flioxVersion   : String!
    projectName    : String
    projectWebsite : String
    envName        : String
    envColor       : String
    pubSub         : Boolean!
    routes         : [String!]!
    memory         : HostMemory
}

input HostInfoInput {
    hostName       : String!
    hostVersion    : String!
    flioxVersion   : String!
    projectName    : String
    projectWebsite : String
    envName        : String
    envColor       : String
    pubSub         : Boolean!
    routes         : [String!]!
    memory         : HostMemoryInput
}

type HostMemory {
    totalAllocatedBytes : Int!
    totalMemory         : Int!
    gc                  : HostGCMemory
}

input HostMemoryInput {
    totalAllocatedBytes : Int!
    totalMemory         : Int!
    gc                  : HostGCMemoryInput
}

type HostGCMemory {
    highMemoryLoadThresholdBytes : Int!
    totalAvailableMemoryBytes    : Int!
    memoryLoadBytes              : Int!
    heapSizeBytes                : Int!
    fragmentedBytes              : Int!
}

input HostGCMemoryInput {
    highMemoryLoadThresholdBytes : Int!
    totalAvailableMemoryBytes    : Int!
    memoryLoadBytes              : Int!
    heapSizeBytes                : Int!
    fragmentedBytes              : Int!
}

type HostCluster {
    databases : [DbContainers!]!
}

input HostClusterInput {
    databases : [DbContainersInput!]!
}

type UserParam {
    addGroups    : [String!]
    removeGroups : [String!]
}

input UserParamInput {
    addGroups    : [String!]
    removeGroups : [String!]
}

type UserResult {
    roles   : [String!]!
    groups  : [String!]!
    clients : [String!]!
    counts  : [RequestCount!]!
}

input UserResultInput {
    roles   : [String!]!
    groups  : [String!]!
    clients : [String!]!
    counts  : [RequestCountInput!]!
}

type RequestCount {
    db       : String
    requests : Int!
    tasks    : Int!
}

input RequestCountInput {
    db       : String
    requests : Int!
    tasks    : Int!
}

type ClientParam {
    ensureClientId : Boolean
    queueEvents    : Boolean
}

input ClientParamInput {
    ensureClientId : Boolean
    queueEvents    : Boolean
}

type ClientResult {
    queueEvents        : Boolean!
    queuedEvents       : Int!
    clientId           : String
    subscriptionEvents : SubscriptionEvents
}

input ClientResultInput {
    queueEvents        : Boolean!
    queuedEvents       : Int!
    clientId           : String
    subscriptionEvents : SubscriptionEventsInput
}

type SubscriptionEvents {
    seq         : Int!
    queued      : Int!
    queueEvents : Boolean!
    connected   : Boolean!
    endpoint    : String
    messageSubs : [String!]
    changeSubs  : [ChangeSubscription!]
}

input SubscriptionEventsInput {
    seq         : Int!
    queued      : Int!
    queueEvents : Boolean!
    connected   : Boolean!
    endpoint    : String
    messageSubs : [String!]
    changeSubs  : [ChangeSubscriptionInput!]
}

type ChangeSubscription {
    container : String!
    changes   : [ChangeType!]!
    filter    : String
}

input ChangeSubscriptionInput {
    container : String!
    changes   : [ChangeType!]!
    filter    : String
}

enum ChangeType {
    create
    upsert
    merge
    delete
}

