
{
  "openapi": "3.0.0",
  "info": {
    "title":        "PocStore",
    "description":  "The <b>PocStore</b> offer two functionalities: <br/>\n1. Defines a database <b>schema</b> by declaring its containers, commands and messages<br/>\n2. Is a database <b>client</b> providing type-safe access to its containers, commands and messages <br/>",
    "version":      "0.0.0"
  },
  "servers": [
    {
      "url":          "http://localhost:8010/fliox/rest/main_db/"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "summary":    "return all database containers",
        "tags":       ["database"],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/DbContainers"
                }
              }
            }
          }
        }
      }
    },
    "/?command=TestCommand": {
      "get": {
        "summary":    "",
        "tags":       ["commands"],
        "parameters": [
          {
            "in":       "query",
            "name":     "param",
            "schema":   { "$ref": "UnitTest.Fliox.Client.json#/definitions/TestCommand" },
            "description": "---"
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          }
        }
      }
    },
    "/?command=SyncCommand": {
      "get": {
        "summary":    "",
        "tags":       ["commands"],
        "parameters": [
          {
            "in":       "query",
            "name":     "param",
            "schema":   { "type": "string" },
            "description": "---"
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          }
        }
      }
    },
    "/?command=AsyncCommand": {
      "get": {
        "summary":    "",
        "tags":       ["commands"],
        "parameters": [
          {
            "in":       "query",
            "name":     "param",
            "schema":   { "type": "string" },
            "description": "---"
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          }
        }
      }
    },
    "/?command=Command1": {
      "get": {
        "summary":    "",
        "tags":       ["commands"],
        "parameters": [
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          }
        }
      }
    },
    "/?command=test.Command2": {
      "get": {
        "summary":    "",
        "tags":       ["commands"],
        "parameters": [
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          }
        }
      }
    },
    "/?command=test.CommandHello": {
      "get": {
        "summary":    "",
        "tags":       ["commands"],
        "parameters": [
          {
            "in":       "query",
            "name":     "param",
            "schema":   { "type": "string" },
            "description": "---"
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          }
        }
      }
    },
    "/?command=std.Echo": {
      "get": {
        "summary":    "echos the given parameter to assure the database is working appropriately.",
        "tags":       ["standard commands"],
        "parameters": [
          {
            "in":       "query",
            "name":     "param",
            "schema":   {   },
            "description": "---"
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          }
        }
      }
    },
    "/?command=std.Containers": {
      "get": {
        "summary":    "list all database containers",
        "tags":       ["standard commands"],
        "parameters": [
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          }
        }
      }
    },
    "/?command=std.Messages": {
      "get": {
        "summary":    "list all database commands and messages",
        "tags":       ["standard commands"],
        "parameters": [
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          }
        }
      }
    },
    "/?command=std.Schema": {
      "get": {
        "summary":    "return the Schema assigned to the database",
        "tags":       ["standard commands"],
        "parameters": [
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          }
        }
      }
    },
    "/?command=std.Stats": {
      "get": {
        "summary":    "return the number of entities of all containers (or the given container) of the database",
        "tags":       ["standard commands"],
        "parameters": [
          {
            "in":       "query",
            "name":     "param",
            "schema":   { "type": "string" },
            "description": "---"
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          }
        }
      }
    },
    "/?command=std.Details": {
      "get": {
        "summary":    "returns general information about the Hub like version, host, project and environment name",
        "tags":       ["standard commands"],
        "parameters": [
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          }
        }
      }
    },
    "/?command=std.Cluster": {
      "get": {
        "summary":    "list all databases and their containers hosted by the Hub",
        "tags":       ["standard commands"],
        "parameters": [
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          }
        }
      }
    },
    "/?message=Message1": {
      "get": {
        "summary":    "",
        "tags":       ["messages"],
        "parameters": [
          {
            "in":       "query",
            "name":     "param",
            "schema":   { "type": "string" },
            "description": "---"
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          }
        }
      }
    },
    "/?message=AsyncMessage": {
      "get": {
        "summary":    "",
        "tags":       ["messages"],
        "parameters": [
          {
            "in":       "query",
            "name":     "param",
            "schema":   { "type": "string" },
            "description": "---"
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          }
        }
      }
    },
    "/?message=test.Message2": {
      "get": {
        "summary":    "",
        "tags":       ["messages"],
        "parameters": [
          {
            "in":       "query",
            "name":     "param",
            "schema":   { "type": "string" },
            "description": "---"
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          }
        }
      }
    },
    "/orders": {
      "get": {
        "summary":    "return all records in container orders",
        "tags":       ["container: orders"],
        "parameters": [
          {
            "in":       "query",
            "name":     "filter",
            "schema":   { "type": "string" },
            "description": "---"
          },
          {
            "in":       "query",
            "name":     "limit",
            "schema":   { "type": "integer" },
            "description": "---"
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "UnitTest.Fliox.Client.Order.json#/definitions/Order"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary":    "create or update records in container orders",
        "tags":       ["container: orders"],
        "requestBody": {          
          "description": "---",
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "UnitTest.Fliox.Client.Order.json#/definitions/Order" }
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      },
      "delete": {
        "summary":    "delete records in container orders by id",
        "tags":       ["container: orders"],
        "parameters": [
          {
            "in":       "query",
            "name":     "ids",
            "schema":   { "type": "string" },
            "required": true,
            "description": "---"
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      }
    },
    "/orders/{id}": {
      "get": {
        "summary":    "return a single record from container orders",
        "tags":       ["container: orders"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": "---"
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "UnitTest.Fliox.Client.Order.json#/definitions/Order"
                }
              }
            }
          }
        }
      }
    },
    "/customers": {
      "get": {
        "summary":    "return all records in container customers",
        "tags":       ["container: customers"],
        "parameters": [
          {
            "in":       "query",
            "name":     "filter",
            "schema":   { "type": "string" },
            "description": "---"
          },
          {
            "in":       "query",
            "name":     "limit",
            "schema":   { "type": "integer" },
            "description": "---"
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "UnitTest.Fliox.Client.Customer.json#/definitions/Customer"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary":    "create or update records in container customers",
        "tags":       ["container: customers"],
        "requestBody": {          
          "description": "---",
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "UnitTest.Fliox.Client.Customer.json#/definitions/Customer" }
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      },
      "delete": {
        "summary":    "delete records in container customers by id",
        "tags":       ["container: customers"],
        "parameters": [
          {
            "in":       "query",
            "name":     "ids",
            "schema":   { "type": "string" },
            "required": true,
            "description": "---"
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      }
    },
    "/customers/{id}": {
      "get": {
        "summary":    "return a single record from container customers",
        "tags":       ["container: customers"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": "---"
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "UnitTest.Fliox.Client.Customer.json#/definitions/Customer"
                }
              }
            }
          }
        }
      }
    },
    "/articles": {
      "get": {
        "summary":    "return all records in container articles",
        "tags":       ["container: articles"],
        "parameters": [
          {
            "in":       "query",
            "name":     "filter",
            "schema":   { "type": "string" },
            "description": "---"
          },
          {
            "in":       "query",
            "name":     "limit",
            "schema":   { "type": "integer" },
            "description": "---"
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "UnitTest.Fliox.Client.Article.json#/definitions/Article"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary":    "create or update records in container articles",
        "tags":       ["container: articles"],
        "requestBody": {          
          "description": "---",
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "UnitTest.Fliox.Client.Article.json#/definitions/Article" }
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      },
      "delete": {
        "summary":    "delete records in container articles by id",
        "tags":       ["container: articles"],
        "parameters": [
          {
            "in":       "query",
            "name":     "ids",
            "schema":   { "type": "string" },
            "required": true,
            "description": "---"
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      }
    },
    "/articles/{id}": {
      "get": {
        "summary":    "return a single record from container articles",
        "tags":       ["container: articles"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": "---"
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "UnitTest.Fliox.Client.Article.json#/definitions/Article"
                }
              }
            }
          }
        }
      }
    },
    "/producers": {
      "get": {
        "summary":    "return all records in container producers",
        "tags":       ["container: producers"],
        "parameters": [
          {
            "in":       "query",
            "name":     "filter",
            "schema":   { "type": "string" },
            "description": "---"
          },
          {
            "in":       "query",
            "name":     "limit",
            "schema":   { "type": "integer" },
            "description": "---"
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "UnitTest.Fliox.Client.Producer.json#/definitions/Producer"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary":    "create or update records in container producers",
        "tags":       ["container: producers"],
        "requestBody": {          
          "description": "---",
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "UnitTest.Fliox.Client.Producer.json#/definitions/Producer" }
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      },
      "delete": {
        "summary":    "delete records in container producers by id",
        "tags":       ["container: producers"],
        "parameters": [
          {
            "in":       "query",
            "name":     "ids",
            "schema":   { "type": "string" },
            "required": true,
            "description": "---"
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      }
    },
    "/producers/{id}": {
      "get": {
        "summary":    "return a single record from container producers",
        "tags":       ["container: producers"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": "---"
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "UnitTest.Fliox.Client.Producer.json#/definitions/Producer"
                }
              }
            }
          }
        }
      }
    },
    "/employees": {
      "get": {
        "summary":    "return all records in container employees",
        "tags":       ["container: employees"],
        "parameters": [
          {
            "in":       "query",
            "name":     "filter",
            "schema":   { "type": "string" },
            "description": "---"
          },
          {
            "in":       "query",
            "name":     "limit",
            "schema":   { "type": "integer" },
            "description": "---"
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "UnitTest.Fliox.Client.Employee.json#/definitions/Employee"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary":    "create or update records in container employees",
        "tags":       ["container: employees"],
        "requestBody": {          
          "description": "---",
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "UnitTest.Fliox.Client.Employee.json#/definitions/Employee" }
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      },
      "delete": {
        "summary":    "delete records in container employees by id",
        "tags":       ["container: employees"],
        "parameters": [
          {
            "in":       "query",
            "name":     "ids",
            "schema":   { "type": "string" },
            "required": true,
            "description": "---"
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      }
    },
    "/employees/{id}": {
      "get": {
        "summary":    "return a single record from container employees",
        "tags":       ["container: employees"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": "---"
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "UnitTest.Fliox.Client.Employee.json#/definitions/Employee"
                }
              }
            }
          }
        }
      }
    },
    "/types": {
      "get": {
        "summary":    "return all records in container types",
        "tags":       ["container: types"],
        "parameters": [
          {
            "in":       "query",
            "name":     "filter",
            "schema":   { "type": "string" },
            "description": "---"
          },
          {
            "in":       "query",
            "name":     "limit",
            "schema":   { "type": "integer" },
            "description": "---"
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "UnitTest.Fliox.Client.TestType.json#/definitions/TestType"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary":    "create or update records in container types",
        "tags":       ["container: types"],
        "requestBody": {          
          "description": "---",
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "UnitTest.Fliox.Client.TestType.json#/definitions/TestType" }
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      },
      "delete": {
        "summary":    "delete records in container types by id",
        "tags":       ["container: types"],
        "parameters": [
          {
            "in":       "query",
            "name":     "ids",
            "schema":   { "type": "string" },
            "required": true,
            "description": "---"
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      }
    },
    "/types/{id}": {
      "get": {
        "summary":    "return a single record from container types",
        "tags":       ["container: types"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": "---"
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "UnitTest.Fliox.Client.TestType.json#/definitions/TestType"
                }
              }
            }
          }
        }
      }
    }
  }   
}