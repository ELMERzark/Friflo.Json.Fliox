// Generated by: https://github.com/friflo/Friflo.Json.Fliox#schema
using Friflo.Json.Fliox.Mapper.Map;
using Friflo.Json.Tests.Common.UnitTest.Fliox.Client;

// ReSharper disable InconsistentNaming
namespace Gen.Friflo.Json.Tests.Common.UnitTest.Fliox.Client
{
    static class Gen_NonClsType
    {
        private const int Gen_id = 0;
        private const int Gen_int8 = 1;
        private const int Gen_uint16 = 2;
        private const int Gen_uint32 = 3;
        private const int Gen_uint64 = 4;
        private const int Gen_int8Null = 5;
        private const int Gen_uint16Null = 6;
        private const int Gen_uint32Null = 7;
        private const int Gen_uint64Null = 8;

        private static bool ReadField (ref NonClsType obj, PropField field, ref Reader reader) {
            bool success;
            switch (field.genIndex) {
                case Gen_id:         obj.id         = reader.ReadString     (field, obj.id,         out success);  return success;
                case Gen_int8:       obj.int8       = reader.ReadSByte      (field, out success);  return success;
                case Gen_uint16:     obj.uint16     = reader.ReadUInt16     (field, out success);  return success;
                case Gen_uint32:     obj.uint32     = reader.ReadUInt32     (field, out success);  return success;
                case Gen_uint64:     obj.uint64     = reader.ReadUInt64     (field, out success);  return success;
                case Gen_int8Null:   obj.int8Null   = reader.ReadSByteNull  (field, out success);  return success;
                case Gen_uint16Null: obj.uint16Null = reader.ReadUInt16Null (field, out success);  return success;
                case Gen_uint32Null: obj.uint32Null = reader.ReadUInt32Null (field, out success);  return success;
                case Gen_uint64Null: obj.uint64Null = reader.ReadUInt64Null (field, out success);  return success;
            }
            return false;
        }

        private static void Write(ref NonClsType obj, PropField[] fields, ref Writer writer, ref bool firstMember) {
            writer.WriteString     (fields[Gen_id],         obj.id,         ref firstMember);
            writer.WriteSByte      (fields[Gen_int8],       obj.int8,       ref firstMember);
            writer.WriteUInt16     (fields[Gen_uint16],     obj.uint16,     ref firstMember);
            writer.WriteUInt32     (fields[Gen_uint32],     obj.uint32,     ref firstMember);
            writer.WriteUInt64     (fields[Gen_uint64],     obj.uint64,     ref firstMember);
            writer.WriteSByteNull  (fields[Gen_int8Null],   obj.int8Null,   ref firstMember);
            writer.WriteUInt16Null (fields[Gen_uint16Null], obj.uint16Null, ref firstMember);
            writer.WriteUInt32Null (fields[Gen_uint32Null], obj.uint32Null, ref firstMember);
            writer.WriteUInt64Null (fields[Gen_uint64Null], obj.uint64Null, ref firstMember);
        }
    }
}

