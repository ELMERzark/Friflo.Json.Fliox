
{
  "openapi": "3.0.0",
  "x-generator": "Generated by: https://github.com/friflo/Friflo.Json.Fliox#schema",
  "info": {
    "title":        "GlobalClient",
    "description":  "Generated by <a href='https://github.com/friflo/Friflo.Json.Fliox#schema'>JSON Fliox</a>",
    "version":      "0.0.0"
  },
  "servers": [

  ],
  "tags": [
    {
      "name": "database",
      "description": "<a target='GlobalClient' href='html/schema.html'>schema</a>"
    },
    {
      "name": "commands",
      "description": "database <a target='GlobalClient' href='html/schema.html#commands'>commands</a>"
    },
    {
      "name": "jobs",
      "description": "entity type: <a target='GlobalClient' href='html/schema.html#Default.GlobalJob'>GlobalJob</a>"
    }],
  "paths": {
    "/": {
      "get": {
        "summary":    "return all database containers",
        "tags":       ["database"],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/DbContainers"
                }
              }
            }
          }
        }
      }
    },
    "/?cmd=ClearCompletedJobs": {
      "post": {
        "summary":    "Delete all jobs marked as completed / not completed",
        "tags":       ["commands"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "Standard.json#/definitions/int32"
                }
              }
            }
          }
        }
      }
    },
    "/?cmd=std.Echo": {
      "post": {
        "summary":    "Echos the given parameter to assure the database is working appropriately.",
        "tags":       ["commands"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                   
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                   
                }
              }
            }
          }
        }
      }
    },
    "/?cmd=std.Delay": {
      "post": {
        "summary":    "A command that completes after a specified number of milliseconds.",
        "tags":       ["commands"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "$ref": "Standard.json#/definitions/int32"
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "Standard.json#/definitions/int32"
                }
              }
            }
          }
        }
      }
    },
    "/?cmd=std.Containers": {
      "post": {
        "summary":    "List all database containers",
        "tags":       ["commands"],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/DbContainers"
                }
              }
            }
          }
        }
      }
    },
    "/?cmd=std.Messages": {
      "post": {
        "summary":    "List all database commands and messages",
        "tags":       ["commands"],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/DbMessages"
                }
              }
            }
          }
        }
      }
    },
    "/?cmd=std.Schema": {
      "post": {
        "summary":    "Return the Schema assigned to the database",
        "tags":       ["commands"],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/DbSchema"
                }
              }
            }
          }
        }
      }
    },
    "/?cmd=std.Stats": {
      "post": {
        "summary":    "Return the number of entities of all containers (or the given container) of the database",
        "tags":       ["commands"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/DbStats"
                }
              }
            }
          }
        }
      }
    },
    "/?cmd=std.TransactionBegin": {
      "post": {
        "summary":    "Begin a transaction containing all subsequent <b>SyncTask</b>'s.<br/>\nThe transaction ends by either calling <b>SyncTasks</b> or explicit by\n<b>TransactionCommit</b> / <b>TransactionRollback</b>",
        "tags":       ["commands"],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/TransactionResult"
                }
              }
            }
          }
        }
      }
    },
    "/?cmd=std.TransactionCommit": {
      "post": {
        "summary":    "Commit a transaction started previously with <b>TransactionBegin</b>",
        "tags":       ["commands"],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/TransactionResult"
                }
              }
            }
          }
        }
      }
    },
    "/?cmd=std.TransactionRollback": {
      "post": {
        "summary":    "Rollback a transaction started previously with <b>TransactionBegin</b>",
        "tags":       ["commands"],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/TransactionResult"
                }
              }
            }
          }
        }
      }
    },
    "/?cmd=std.ExecuteRawSQL": {
      "post": {
        "summary":    "Execute a raw SQL query / statement",
        "tags":       ["commands"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "$ref": "Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/RawSql"
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/RawSqlResult"
                }
              }
            }
          }
        }
      }
    },
    "/?cmd=std.Host": {
      "post": {
        "summary":    "Returns general information about the Hub like version, host, project and environment name",
        "tags":       ["commands"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "$ref": "Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/HostParam"
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/HostInfo"
                }
              }
            }
          }
        }
      }
    },
    "/?cmd=std.Cluster": {
      "post": {
        "summary":    "List all databases and their containers hosted by the Hub",
        "tags":       ["commands"],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/HostCluster"
                }
              }
            }
          }
        }
      }
    },
    "/?cmd=std.User": {
      "post": {
        "summary":    "Return the groups of the current user. Optionally change the groups of the current user",
        "tags":       ["commands"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "$ref": "Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/UserParam"
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/UserResult"
                }
              }
            }
          }
        }
      }
    },
    "/?cmd=std.Client": {
      "post": {
        "summary":    "Return client specific infos and adjust general client behavior like <b>queueEvents</b>",
        "tags":       ["commands"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "$ref": "Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/ClientParam"
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/ClientResult"
                }
              }
            }
          }
        }
      }
    },
    "/jobs": {
      "get": {
        "summary":    "return / filter multiple records from container jobs",
        "description":    "To process big result sets fetch them iteratively by setting **maxCount** of records per request and use the returned **cursor** on the subsequent request.",
        "tags":       ["jobs"],
        "parameters": [
          {
            "in":       "query",
            "name":     "filter",
            "schema":   { "type": "string" },
            "description": "filter returned records by applying a expression predicate. E.g. `o.name == 'Peter'`"
          },
          {
            "in":       "query",
            "name":     "limit",
            "schema":   { "type": "integer" },
            "description": "limit the number of returned records"
          },
          {
            "in":       "query",
            "name":     "maxCount",
            "schema":   { "type": "integer" },
            "description": "maximum number of records. Result will return a **cursor** if more records available."
          },
          {
            "in":       "query",
            "name":     "cursor",
            "schema":   { "type": "string" },
            "description": "pass the **cursor** returned by the previous request"
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "Default.GlobalJob.json#/definitions/GlobalJob"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary":    "create or update multiple records in container jobs",
        "tags":       ["jobs"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "Default.GlobalJob.json#/definitions/GlobalJob" }
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      }
    },
    "/jobs/{id}": {
      "get": {
        "summary":    "get a single record from container jobs",
        "tags":       ["jobs"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "Default.GlobalJob.json#/definitions/GlobalJob"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary":    "write a single record to container jobs",
        "tags":       ["jobs"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "$ref": "Default.GlobalJob.json#/definitions/GlobalJob"
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      },
      "patch": {
        "summary":    "patch a single record in container jobs",
        "tags":       ["jobs"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { 
                    "type": "object",
                    "properties": {
                      "op": {
                        "enum": ["replace"]
                      },
                      "path": {
                        "type": "string"
                      },
                      "value": { }
                    } }
                },
                "example": [
                  {
                    "op":    "replace",
                    "path":  ".name",
                    "value": "Hello Patch!"
                  }
                ]
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      },
      "delete": {
        "summary":    "delete a single record in container jobs by id",
        "tags":       ["jobs"],
        "parameters": [
          {
            "in":       "path",
            "name":     "id",
            "schema":   { "type": "string" },
            "required": true,
            "description": ""
          }
        ],
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      }
    },
    "/jobs/bulk-get": {
      "post": {
        "summary":    "get multiple records by id from container jobs",
        "tags":       ["jobs"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "string" }
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "Default.GlobalJob.json#/definitions/GlobalJob" }
                }
              }
            }
          }
        }
      }
    },
    "/jobs/bulk-delete": {
      "post": {
        "summary":    "delete multiple records by id in container jobs",
        "tags":       ["jobs"],
        "requestBody": {          
          "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "string" }
                }
              }
            }
        },
        "responses": {
          "200": {             
            "description": "OK",
            "content": {
              "text/plain": { }
            }
          }
        }
      }
    }
  }   
}