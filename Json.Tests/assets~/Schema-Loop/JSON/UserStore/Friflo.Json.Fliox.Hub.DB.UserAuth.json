{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$comment": "Generated by: https://github.com/friflo/Friflo.Json.Fliox/tree/main/Json/Fliox/Schema",
    "definitions": {
        "UserStore": {
            "type": "object",
            "isAbstract": true,
            "description": "\n            Control individual user access to database containers and commands.\n            Each user has a set of roles stored in container permissions.\n            Each role in roles has a set of rights which grant or deny container access or command execution. \n            ",
            "properties": {
                "credentials": { "additionalProperties": { "$ref": "./Friflo.Json.Fliox.Hub.DB.UserAuth.UserCredential.json#/definitions/UserCredential" }, "type": "object" },
                "permissions": { "additionalProperties": { "$ref": "./Friflo.Json.Fliox.Hub.DB.UserAuth.UserPermission.json#/definitions/UserPermission" }, "type": "object" },
                "roles":       { "additionalProperties": { "$ref": "./Friflo.Json.Fliox.Hub.DB.UserAuth.Role.json#/definitions/Role" }, "type": "object" }
            },
            "required": [
                "credentials",
                "permissions",
                "roles"
            ],
            "additionalProperties": false,
            "commands": {
                "AuthenticateUser": { "param": { "$ref": "#/definitions/AuthenticateUser" }, "result": { "$ref": "#/definitions/AuthenticateUserResult" } },
                "std.Echo":         { "param": {  }, "result": {  },
                    "description": "echos the given parameter to assure the database is working appropriately. " },
                "std.Containers":   { "param": {  }, "result": { "$ref": "./Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/DbContainers" },
                    "description": "list all containers of the database" },
                "std.Commands":     { "param": {  }, "result": { "$ref": "./Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/DbCommands" },
                    "description": "list all commands exposed by the database" },
                "std.Schema":       { "param": {  }, "result": { "$ref": "./Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/DbSchema" },
                    "description": "return the JSON Schema assigned to the database" },
                "std.Stats":        { "param": { "type": "string" }, "result": { "$ref": "./Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/DbStats" },
                    "description": "return the number of entities of all containers (or the given container) of the database" },
                "std.Details":      { "param": {  }, "result": { "$ref": "./Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/HostDetails" },
                    "description": "returns descriptive information about the Hub like version, host, project and environment name" },
                "std.Cluster":      { "param": {  }, "result": { "$ref": "./Friflo.Json.Fliox.Hub.DB.Cluster.json#/definitions/HostCluster" },
                    "description": "list all databases and their containers hosted by the Hub" }
            }
        },
        "AuthenticateUser": {
            "type": "object",
            "properties": {
                "userId": { "type": "string" },
                "token":  { "type": "string" }
            },
            "required": [
                "userId",
                "token"
            ],
            "additionalProperties": false
        },
        "AuthenticateUserResult": {
            "type": "object",
            "properties": {
                "isValid": { "type": "boolean" }
            },
            "required": [
                "isValid"
            ],
            "additionalProperties": false
        }
    }
}

