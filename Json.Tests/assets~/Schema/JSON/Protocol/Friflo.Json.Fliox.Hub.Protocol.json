{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$comment": "Generated by: https://github.com/friflo/Friflo.Json.Fliox/tree/main/Json/Fliox/Schema",
    "definitions": {
        "SyncRequest": {
            "type": "object",
            "extends": { "$ref": "./Friflo.Json.Fliox.Hub.Protocol.ProtocolRequest.json#/definitions/ProtocolRequest" },
            "properties": {
                "msg":      { "enum": ["sync"] },
                "req":      { "oneOf": [{ "$ref": "./Standard.json#/definitions/int32" }, {"type": "null"}], "description": "Used only for RemoteClientHub to enable:\n            \n              1. Out of order response handling for their corresponding requests.\n            \n              2. Multiplexing of requests and their responses for multiple clients e.g. FlioxClient\n                 using the same connection.\n                 This is not a common scenario but it enables using a single WebSocketClientHub\n                 used by multiple clients.\n            \n            The host itself only echos the reqId to reqId and doesn't do\n            anythings else with it." },
                "clt":      { "type": ["string", "null"] },
                "user":     { "type": ["string", "null"], "description": "Identify the user performing a sync request.\n            In case using of using UserAuthenticator the userId and token\n            are use for user authentication." },
                "token":    { "type": ["string", "null"] },
                "ack":      { "oneOf": [{ "$ref": "./Standard.json#/definitions/int32" }, {"type": "null"}], "description": "eventAck is used to ensure (change) events are delivered reliable.\n            A client set eventAck to the last received seq in case\n            it has subscribed to database changes by a SubscribeChanges task.\n            Otherwise eventAck is null." },
                "tasks":    { "type": "array", "items": { "$ref": "./Friflo.Json.Fliox.Hub.Protocol.Tasks.json#/definitions/SyncRequestTask" } },
                "database": { "type": ["string", "null"] },
                "info":     {  }
            },
            "required": [
                "msg",
                "tasks"
            ],
            "additionalProperties": false
        },
        "SyncResponse": {
            "type": "object",
            "extends": { "$ref": "./Friflo.Json.Fliox.Hub.Protocol.ProtocolResponse.json#/definitions/ProtocolResponse" },
            "properties": {
                "msg":          { "enum": ["resp"] },
                "req":          { "oneOf": [{ "$ref": "./Standard.json#/definitions/int32" }, {"type": "null"}], "description": "Set to the value of the corresponding reqId" },
                "clt":          { "type": ["string", "null"], "description": "Set to clientId of a SyncRequest in case the given\n            clientId was valid. Otherwise it is set to null.\n            Calling String@) when clientId == null a\n            new unique client id will be assigned.\n            For tasks which require a clientId a client need to set clientId\n            to clientId.\n            This enables tasks like SubscribeMessage or SubscribeChanges identifying the\n            EventMessage target." },
                "database":     { "type": ["string", "null"] },
                "tasks":        { "type": ["array", "null"], "items": { "$ref": "./Friflo.Json.Fliox.Hub.Protocol.Tasks.json#/definitions/SyncTaskResult" } },
                "containers":   { "type": ["array", "null"], "items": { "$ref": "#/definitions/ContainerEntities" } },
                "createErrors": { "additionalProperties": { "$ref": "#/definitions/EntityErrors" }, "type": "object" },
                "upsertErrors": { "additionalProperties": { "$ref": "#/definitions/EntityErrors" }, "type": "object" },
                "patchErrors":  { "additionalProperties": { "$ref": "#/definitions/EntityErrors" }, "type": "object" },
                "deleteErrors": { "additionalProperties": { "$ref": "#/definitions/EntityErrors" }, "type": "object" },
                "info":         {  }
            },
            "required": [
                "msg"
            ],
            "additionalProperties": false
        },
        "ContainerEntities": {
            "type": "object",
            "properties": {
                "container": { "type": "string" },
                "count":     { "oneOf": [{ "$ref": "./Standard.json#/definitions/int32" }, {"type": "null"}], "description": "Is only set when using a RemoteHostHub to show the number of entities\n            in a serialized protocol message to avoid counting them by hand when debugging.\n            It is not used by the library as it is redundant information." },
                "entities":  { "type": "array", "items": {  } },
                "notFound":  { "type": ["array", "null"], "items": { "type": "string" } },
                "errors":    { "additionalProperties": { "$ref": "./Friflo.Json.Fliox.Hub.Protocol.Models.json#/definitions/EntityError" }, "type": "object" }
            },
            "required": [
                "container",
                "entities"
            ],
            "additionalProperties": false
        },
        "EntityErrors": {
            "type": "object",
            "properties": {
                "container": { "type": ["string", "null"] },
                "errors":    { "additionalProperties": { "$ref": "./Friflo.Json.Fliox.Hub.Protocol.Models.json#/definitions/EntityError" }, "type": "object" }
            },
            "required": [
                "errors"
            ],
            "additionalProperties": false
        },
        "ErrorResponse": {
            "type": "object",
            "extends": { "$ref": "./Friflo.Json.Fliox.Hub.Protocol.ProtocolResponse.json#/definitions/ProtocolResponse" },
            "properties": {
                "msg":     { "enum": ["error"] },
                "req":     { "oneOf": [{ "$ref": "./Standard.json#/definitions/int32" }, {"type": "null"}], "description": "Set to the value of the corresponding reqId" },
                "clt":     { "type": ["string", "null"], "description": "Set to clientId of a SyncRequest in case the given\n            clientId was valid. Otherwise it is set to null.\n            Calling String@) when clientId == null a\n            new unique client id will be assigned.\n            For tasks which require a clientId a client need to set clientId\n            to clientId.\n            This enables tasks like SubscribeMessage or SubscribeChanges identifying the\n            EventMessage target." },
                "message": { "type": ["string", "null"] },
                "type":    { "$ref": "#/definitions/ErrorResponseType" }
            },
            "required": [
                "msg",
                "type"
            ],
            "additionalProperties": false
        },
        "ErrorResponseType": {
            "enum": [
                "BadRequest",
                "Exception",
                "BadResponse"
            ]
        },
        "EventMessage": {
            "type": "object",
            "extends": { "$ref": "./Friflo.Json.Fliox.Hub.Protocol.ProtocolEvent.json#/definitions/ProtocolEvent" },
            "properties": {
                "msg":   { "enum": ["ev"] },
                "seq":   { "$ref": "./Standard.json#/definitions/int32" },
                "src":   { "type": "string" },
                "clt":   { "type": "string" },
                "tasks": { "type": ["array", "null"], "items": { "$ref": "./Friflo.Json.Fliox.Hub.Protocol.Tasks.json#/definitions/SyncRequestTask" }, "description": "Contains the events an application subscribed. These are:\n            \nCreateEntities\nUpsertEntities\nDeleteEntities\nPatchEntities\nSendCommand" }
            },
            "required": [
                "msg",
                "seq",
                "src",
                "clt"
            ],
            "additionalProperties": false
        }
    }
}

