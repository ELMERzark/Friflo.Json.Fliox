// Generated by: https://github.com/friflo/Friflo.Json.Fliox#schema
using Friflo.Json.Fliox.Mapper.Map;
using Friflo.Json.Tests.Common.UnitTest.Fliox.Client;

// ReSharper disable InconsistentNaming
namespace Gen.Friflo.Json.Tests.Common.UnitTest.Fliox.Client
{
    static class Gen_Order
    {
        private const int Gen_id = 0;
        private const int Gen_customer = 1;
        private const int Gen_created = 2;
        private const int Gen_items = 3;

        private static bool ReadField (ref Order obj, PropField field, ref Reader reader) {
            bool success;
            switch (field.genIndex) {
                case Gen_id:       obj.id       = reader.ReadString (field, out success);  return success;
                case Gen_customer: obj.customer = reader.ReadString (field, out success);  return success;
                case Gen_created:  obj.created  = reader.ReadStruct (field, obj.created,  out success);  return success;
                case Gen_items:    obj.items    = reader.ReadClass  (field, obj.items,    out success);  return success;
            }
            return false;
        }

        private static void Write(ref Order obj, PropField[] fields, ref Writer writer, ref bool firstMember) {
            writer.WriteString (fields[Gen_id],       obj.id,       ref firstMember);
            writer.WriteString (fields[Gen_customer], obj.customer, ref firstMember);
            writer.WriteStruct (fields[Gen_created],  obj.created,  ref firstMember);
            writer.WriteClass  (fields[Gen_items],    obj.items,    ref firstMember);
        }
    }
}

