{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$comment": "Generated by: https://github.com/friflo/Friflo.Json.Fliox#schema",
    "definitions": {
        "DbContainers": {
            "type": "object",
            "description": "<b>containers</b> and <b>storage</b> type of a database",
            "properties": {
                "id":         { "type": "string", "description": "database name" },
                "storage":    { "type": "string", "description": "<b>storage</b> type. e.g. memory, file-system, ..." },
                "containers": { "type": "array", "items": { "type": "string" }, "description": "list of database <b>containers</b>" }
            },
            "required": [
                "id",
                "storage",
                "containers"
            ],
            "additionalProperties": false
        },
        "DbMessages": {
            "type": "object",
            "description": "<b>commands</b> and <b>messages</b> of a database",
            "properties": {
                "id":       { "type": "string", "description": "database name" },
                "commands": { "type": "array", "items": { "type": "string" }, "description": "list of database <b>commands</b>" },
                "messages": { "type": "array", "items": { "type": "string" }, "description": "list of database <b>messages</b>" }
            },
            "required": [
                "id",
                "commands",
                "messages"
            ],
            "additionalProperties": false
        },
        "DbSchema": {
            "type": "object",
            "description": "A <b>DbSchema</b> can be assigned to a database to specify its <b>containers</b>, <b>commands</b> and <b>messages</b>.<br/>\nThe types used by the Schema are declared within <b>jsonSchemas</b>.<br/>\nThe type referenced by the tuple <b>schemaName</b> / <b>schemaPath</b> specify the\ndatabase containers, commands and messages.",
            "properties": {
                "id":          { "type": "string", "description": "database name" },
                "schemaName":  { "type": "string", "description": "refer a type definition of the JSON Schema referenced with <b>schemaPath</b>" },
                "schemaPath":  { "type": "string", "description": "refer a JSON Schema in <b>jsonSchemas</b>" },
                "jsonSchemas": { "additionalProperties": {  }, "type": "object", "description": "map of <b>JSON Schemas</b> each containing a set of type definitions.<br/>\nEach JSON Schema is identified by its unique path" }
            },
            "required": [
                "id",
                "schemaName",
                "schemaPath",
                "jsonSchemas"
            ],
            "additionalProperties": false
        },
        "DbStats": {
            "type": "object",
            "description": "list of container statistics. E.g. the number of entities per container",
            "properties": {
                "containers": { "type": ["array", "null"], "items": { "$ref": "#/definitions/ContainerStats" }, "description": "list of container statistics - number of entities per container" }
            },
            "additionalProperties": false
        },
        "ContainerStats": {
            "type": "object",
            "description": "statistics of a single container. E.g. the number of entities in a container",
            "properties": {
                "name":  { "type": "string", "description": "container name" },
                "count": { "$ref": "./Standard.json#/definitions/int64", "description": "number of entities / records within a container" }
            },
            "required": [
                "name",
                "count"
            ],
            "additionalProperties": false
        },
        "HostParam": {
            "type": "object",
            "properties": {
                "memory":    { "type": ["boolean", "null"] },
                "gcCollect": { "type": ["boolean", "null"] }
            },
            "additionalProperties": false
        },
        "HostInfo": {
            "type": "object",
            "description": "general information about a Hub",
            "properties": {
                "hostVersion":    { "type": "string", "description": "host version" },
                "flioxVersion":   { "type": "string", "description": "Fliox library version" },
                "hostName":       { "type": ["string", "null"], "description": "host name. Used as <b>id</b> in\n<b>hosts</b> of database <b>monitor</b>" },
                "projectName":    { "type": ["string", "null"], "description": "project name" },
                "projectWebsite": { "type": ["string", "null"], "description": "link to a website describing project and Hub" },
                "envName":        { "type": ["string", "null"], "description": "environment name. e.g. 'dev', 'test', 'staging', 'prod'" },
                "envColor":       { "type": ["string", "null"], "description": "the color used to display the environment name in GUI's using CSS color format.<br/>\nE.g. using red for a production environment: '#ff0000' or 'rgb(255 0 0)'" },
                "pubSub":         { "type": "boolean", "description": "is true if host support Pub-Sub." },
                "routes":         { "type": "array", "items": { "type": "string" }, "description": "routes configures by <b>HttpHost</b> - commonly below <c>/fliox</c>" },
                "memory":         { "oneOf": [{ "$ref": "#/definitions/HostMemory" }, {"type": "null"}] }
            },
            "required": [
                "hostVersion",
                "flioxVersion",
                "pubSub",
                "routes"
            ],
            "additionalProperties": false
        },
        "HostMemory": {
            "type": "object",
            "properties": {
                "totalAllocatedBytes": { "$ref": "./Standard.json#/definitions/int64" },
                "totalMemory":         { "$ref": "./Standard.json#/definitions/int64" },
                "gc":                  { "oneOf": [{ "$ref": "#/definitions/HostGCMemory" }, {"type": "null"}] }
            },
            "required": [
                "totalAllocatedBytes",
                "totalMemory"
            ],
            "additionalProperties": false
        },
        "HostGCMemory": {
            "type": "object",
            "description": "<b>GCMemoryInfo</b>",
            "properties": {
                "highMemoryLoadThresholdBytes": { "$ref": "./Standard.json#/definitions/int64" },
                "totalAvailableMemoryBytes":    { "$ref": "./Standard.json#/definitions/int64" },
                "memoryLoadBytes":              { "$ref": "./Standard.json#/definitions/int64" },
                "heapSizeBytes":                { "$ref": "./Standard.json#/definitions/int64" },
                "fragmentedBytes":              { "$ref": "./Standard.json#/definitions/int64" }
            },
            "required": [
                "highMemoryLoadThresholdBytes",
                "totalAvailableMemoryBytes",
                "memoryLoadBytes",
                "heapSizeBytes",
                "fragmentedBytes"
            ],
            "additionalProperties": false
        },
        "HostCluster": {
            "type": "object",
            "description": "All <b>databases</b> hosted by Hub",
            "properties": {
                "databases": { "type": "array", "items": { "$ref": "#/definitions/DbContainers" }, "description": "list of <b>databases</b> hosted by Hub" }
            },
            "required": [
                "databases"
            ],
            "additionalProperties": false
        },
        "UserParam": {
            "type": "object",
            "properties": {
                "addGroups":    { "type": ["array", "null"], "items": { "type": "string" } },
                "removeGroups": { "type": ["array", "null"], "items": { "type": "string" } }
            },
            "additionalProperties": false
        },
        "UserResult": {
            "type": "object",
            "properties": {
                "groups":  { "type": "array", "items": { "type": "string" } },
                "clients": { "type": "array", "items": { "type": "string" } },
                "counts":  { "type": ["array", "null"], "items": { "$ref": "#/definitions/RequestCount" }, "description": "number executed requests and tasks per database" }
            },
            "required": [
                "groups",
                "clients"
            ],
            "additionalProperties": false
        },
        "RequestCount": {
            "type": "object",
            "isStruct": true,
            "description": "number of requests and tasks executed per database",
            "properties": {
                "db":       { "type": ["string", "null"], "description": "database name" },
                "requests": { "$ref": "./Standard.json#/definitions/int32", "description": "number of executed requests" },
                "tasks":    { "$ref": "./Standard.json#/definitions/int32", "description": "number of executed tasks" }
            },
            "required": [
                "requests",
                "tasks"
            ],
            "additionalProperties": false
        },
        "ClientParam": {
            "type": "object",
            "properties": {
                "ensureClientId": { "type": ["boolean", "null"], "description": "Return the client id set in <b>SyncRequest</b> or creates a new one in case is was not set." },
                "queueEvents":    { "type": ["boolean", "null"], "description": "If <b>false</b> the hub try to send events to a client when the events are emitted.\nSending events to a disconnected client will never arrive. <br/>\nIf <b>true</b> the hub will store all unacknowledged events for a client in a FIFO queue and send them on reconnects." }
            },
            "additionalProperties": false
        },
        "ClientResult": {
            "type": "object",
            "properties": {
                "queuedEvents":       { "$ref": "./Standard.json#/definitions/int32", "description": "return number of queued events not acknowledged by the client.\nEvents are queued only if the client instruct the Hub to queue events by setting <b>queueEvents</b> = true" },
                "clientId":           { "type": ["string", "null"], "description": "return the client id set in the <b>SyncRequest</b>. Can be null.<br/>\nA new client id is created in case any task requires a client id and the <b>SyncRequest</b> did not set a client id.<br/>\nE.g. <b>ensureClientId</b> = true or <b>queueEvents</b> = true" },
                "subscriptionEvents": { "oneOf": [{ "$ref": "#/definitions/SubscriptionEvents" }, {"type": "null"}], "description": "number of sent or queued client events and its message and change subscriptions" }
            },
            "required": [
                "queuedEvents"
            ],
            "additionalProperties": false
        },
        "SubscriptionEvents": {
            "type": "object",
            "isStruct": true,
            "description": "number of sent or queued client events and its message and change subscriptions",
            "properties": {
                "seq":         { "$ref": "./Standard.json#/definitions/int32", "description": "number of events sent to a client" },
                "queued":      { "$ref": "./Standard.json#/definitions/int32", "description": "number of queued events not acknowledged by a client" },
                "queueEvents": { "type": "boolean", "description": "true if client is instructed to queue events for reliable event delivery in case of reconnects" },
                "connected":   { "type": "boolean", "description": "true if client is connected. Non remote client are always connected" },
                "messageSubs": { "type": ["array", "null"], "items": { "type": "string" }, "description": "message / command subscriptions of a client" },
                "changeSubs":  { "type": ["array", "null"], "items": { "$ref": "#/definitions/ChangeSubscription" }, "description": "change subscriptions of a client" }
            },
            "required": [
                "seq",
                "queued",
                "queueEvents",
                "connected"
            ],
            "additionalProperties": false
        },
        "ChangeSubscription": {
            "type": "object",
            "description": "change subscription for a specific container",
            "properties": {
                "container": { "type": "string", "description": "name of subscribed container" },
                "changes":   { "type": "array", "items": { "$ref": "./Friflo.Json.Fliox.Hub.Protocol.Tasks.json#/definitions/EntityChange" }, "description": "type of subscribed changes like create, upsert, delete and patch" },
                "filter":    { "type": ["string", "null"], "description": "filter to narrow the amount of change events" }
            },
            "required": [
                "container",
                "changes"
            ],
            "additionalProperties": false
        }
    }
}

