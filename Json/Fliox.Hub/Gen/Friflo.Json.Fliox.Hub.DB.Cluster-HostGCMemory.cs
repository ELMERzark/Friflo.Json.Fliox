// Generated by: https://github.com/friflo/Friflo.Json.Fliox#schema
using Friflo.Json.Fliox.Mapper.Map;
using Friflo.Json.Fliox.Hub.DB.Cluster;

// ReSharper disable InconsistentNaming
namespace Gen.Friflo.Json.Fliox.Hub.DB.Cluster
{
    static class Gen_HostGCMemory
    {
        private const int Gen_highMemoryLoadThresholdBytes = 0;
        private const int Gen_totalAvailableMemoryBytes = 1;
        private const int Gen_memoryLoadBytes = 2;
        private const int Gen_heapSizeBytes = 3;
        private const int Gen_fragmentedBytes = 4;

        private static bool ReadField (ref HostGCMemory obj, PropField field, ref Reader reader) {
            bool success;
            switch (field.genIndex) {
                case Gen_highMemoryLoadThresholdBytes: obj.highMemoryLoadThresholdBytes = reader.ReadInt64 (field, out success);  return success;
                case Gen_totalAvailableMemoryBytes:    obj.totalAvailableMemoryBytes    = reader.ReadInt64 (field, out success);  return success;
                case Gen_memoryLoadBytes:              obj.memoryLoadBytes              = reader.ReadInt64 (field, out success);  return success;
                case Gen_heapSizeBytes:                obj.heapSizeBytes                = reader.ReadInt64 (field, out success);  return success;
                case Gen_fragmentedBytes:              obj.fragmentedBytes              = reader.ReadInt64 (field, out success);  return success;
            }
            return false;
        }

        private static void Write(ref HostGCMemory obj, PropField[] fields, ref Writer writer, ref bool firstMember) {
            writer.WriteInt64 (fields[Gen_highMemoryLoadThresholdBytes], obj.highMemoryLoadThresholdBytes, ref firstMember);
            writer.WriteInt64 (fields[Gen_totalAvailableMemoryBytes],    obj.totalAvailableMemoryBytes,    ref firstMember);
            writer.WriteInt64 (fields[Gen_memoryLoadBytes],              obj.memoryLoadBytes,              ref firstMember);
            writer.WriteInt64 (fields[Gen_heapSizeBytes],                obj.heapSizeBytes,                ref firstMember);
            writer.WriteInt64 (fields[Gen_fragmentedBytes],              obj.fragmentedBytes,              ref firstMember);
        }
    }
}

