{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$comment": "Generated by: https://github.com/friflo/Friflo.Json.Fliox#schema",
    "definitions": {
        "ReadEntitiesSet": {
            "type": "object",
            "description": "Specify the <b>ids</b> requested by a <b>ReadEntities</b> task.<br/>\nTo return entities referenced by fields of the read result use <b>references</b>",
            "properties": {
                "ids":        { "type": "array", "items": { "type": "string" }, "description": "list of entity <b>ids</b> requested by a <b>ReadEntities</b> task" },
                "references": { "type": ["array", "null"], "items": { "$ref": "#/definitions/References" }, "description": "used to request the entities referenced by properties of a read task result" }
            },
            "required": [
                "ids"
            ],
            "additionalProperties": false
        },
        "References": {
            "type": "object",
            "description": "<b>References</b> are used to return entities referenced by fields of entities returned by read and query tasks.<br/><b>References</b> can be nested to return referenced entities of referenced entities.",
            "properties": {
                "selector":   { "type": "string", "description": "the field path used as a reference to an entity in the specified <b>container</b>" },
                "container":  { "type": "string", "description": "the <b>container</b> storing the entities referenced by the specified <b>selector</b>" },
                "keyName":    { "type": ["string", "null"] },
                "isIntKey":   { "type": ["boolean", "null"] },
                "references": { "type": ["array", "null"], "items": { "$ref": "#/definitions/References" } }
            },
            "required": [
                "selector",
                "container"
            ],
            "additionalProperties": false
        },
        "ReadEntitiesSetResult": {
            "type": "object",
            "properties": {
                "references": { "type": ["array", "null"], "items": { "$ref": "#/definitions/ReferencesResult" } }
            },
            "additionalProperties": false
        },
        "ReferencesResult": {
            "type": "object",
            "properties": {
                "error":      { "type": ["string", "null"] },
                "container":  { "type": ["string", "null"], "description": "container name - not utilized by Protocol" },
                "count":      { "oneOf": [{ "$ref": "./Standard.json#/definitions/int32" }, {"type": "null"}], "description": "number of <b>ids</b> - not utilized by Protocol" },
                "ids":        { "type": "array", "items": { "type": "string" } },
                "references": { "type": ["array", "null"], "items": { "$ref": "#/definitions/ReferencesResult" } }
            },
            "required": [
                "ids"
            ],
            "additionalProperties": false
        },
        "EntityError": {
            "type": "object",
            "description": "Used by <b>SyncResponse</b> to return errors when mutating an entity by: create, upsert, patch and delete",
            "properties": {
                "type":    { "$ref": "#/definitions/EntityErrorType", "description": "error type when accessing an entity in a database" },
                "message": { "type": ["string", "null"], "description": "error details when accessing an entity" }
            },
            "required": [
                "type"
            ],
            "additionalProperties": false
        },
        "EntityErrorType": {
            "enum": [
                "Undefined",
                "ParseError",
                "ReadError",
                "WriteError",
                "DeleteError",
                "PatchError"
            ],
            "descriptions": {
                "ParseError":  "Invalid JSON when reading an entity from database<br/>\ncan happen with key-value databases - e.g. file-system - as their values are not restricted to JSON",
                "ReadError":   "Reading an entity from database failed<br/>\ne.g. a corrupt file when using the file-system as database",
                "WriteError":  "Writing an entity to database failed<br/>\ne.g. the file is already in use by another process when using the file-system as database",
                "DeleteError": "Deleting an entity in database failed<br/>\ne.g. the file is already in use by another process when using the file-system as database",
                "PatchError":  "Patching an entity failed"
            }

        }
    }
}

