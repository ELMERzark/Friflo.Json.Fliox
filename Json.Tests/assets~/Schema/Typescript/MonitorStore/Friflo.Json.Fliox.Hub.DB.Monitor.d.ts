// Generated by: https://github.com/friflo/Friflo.Json.Fliox/tree/main/Json/Fliox/Schema
import { DbContainers } from "./Friflo.Json.Fliox.Hub.DB.Cluster";
import { DbMessages }   from "./Friflo.Json.Fliox.Hub.DB.Cluster";
import { DbSchema }     from "./Friflo.Json.Fliox.Hub.DB.Cluster";
import { DbStats }      from "./Friflo.Json.Fliox.Hub.DB.Cluster";
import { HostDetails }  from "./Friflo.Json.Fliox.Hub.DB.Cluster";
import { HostCluster }  from "./Friflo.Json.Fliox.Hub.DB.Cluster";
import { int32 }        from "./Standard";
import { Change }       from "./Friflo.Json.Fliox.Hub.Protocol.Tasks";

/**
 * **MonitorStore** expose access information of the Hub and its databases:  
 * - request and task count executed per user   
 * - request and task count executed per client. A user can access without, one or multiple client ids.   
 * - events sent to (or buffered for) clients subscribed by these clients.   
 * - aggregated access counts of the Hub in the last 30 seconds and 30 minutes.
 */
// schema documentation only - not implemented right now
export interface MonitorStore {
    // --- containers
    hosts      : { [key: string]: HostHits };
    users      : { [key: string]: UserHits };
    clients    : { [key: string]: ClientHits };
    histories  : { [key: string]: HistoryHits };

    // --- commands
    /** Reset all request, task and event counters */
    ["ClearStats"]         (param: ClearStats | null) : ClearStatsResult;
    /** echos the given parameter to assure the database is working appropriately. */
    ["std.Echo"]           (param: any) : any;
    /** list all containers of the database */
    ["std.Containers"]     () : DbContainers;
    /** list all commands exposed by the database */
    ["std.Messages"]       () : DbMessages;
    /** return the JSON Schema assigned to the database */
    ["std.Schema"]         () : DbSchema;
    /** return the number of entities of all containers (or the given container) of the database */
    ["std.Stats"]          (param: string | null) : DbStats;
    /** returns descriptive information about the Hub like version, host, project and environment name */
    ["std.Details"]        () : HostDetails;
    /** list all databases and their containers hosted by the Hub */
    ["std.Cluster"]        () : HostCluster;
}

export class HostHits {
    id      : string;
    counts  : RequestCount;
}

export class UserHits {
    id       : string;
    clients  : string[];
    counts?  : RequestCount[] | null;
}

export class ClientHits {
    id      : string;
    user    : string;
    counts? : RequestCount[] | null;
    event?  : EventDelivery | null;
}

export class HistoryHits {
    id          : int32;
    counters    : int32[];
    lastUpdate  : int32;
}

export class RequestCount {
    db?       : string | null;
    requests  : int32;
    tasks     : int32;
}

export class EventDelivery {
    seq          : int32;
    queued       : int32;
    messageSubs? : string[] | null;
    changeSubs?  : ChangeSubscriptions[] | null;
}

export class ChangeSubscriptions {
    container  : string;
    changes    : Change[];
    filter?    : string | null;
}

export class ClearStats {
}

export class ClearStatsResult {
}

