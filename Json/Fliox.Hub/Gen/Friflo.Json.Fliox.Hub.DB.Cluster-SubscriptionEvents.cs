// Generated by: https://github.com/friflo/Friflo.Json.Fliox#schema
using Friflo.Json.Fliox.Mapper.Map;
using Friflo.Json.Fliox.Hub.DB.Cluster;

// ReSharper disable InconsistentNaming
namespace Gen.Friflo.Json.Fliox.Hub.DB.Cluster
{
    static class Gen_SubscriptionEvents
    {
        private const int Gen_seq = 0;
        private const int Gen_queued = 1;
        private const int Gen_queueEvents = 2;
        private const int Gen_connected = 3;
        private const int Gen_messageSubs = 4;
        private const int Gen_changeSubs = 5;

        private static bool ReadField (ref SubscriptionEvents obj, PropField field, ref Reader reader) {
            bool success;
            switch (field.genIndex) {
                case Gen_seq:         obj.seq         = reader.ReadInt32   (field, out success);  return success;
                case Gen_queued:      obj.queued      = reader.ReadInt32   (field, out success);  return success;
                case Gen_queueEvents: obj.queueEvents = reader.ReadBoolean (field, out success);  return success;
                case Gen_connected:   obj.connected   = reader.ReadBoolean (field, out success);  return success;
                case Gen_messageSubs: obj.messageSubs = reader.ReadClass   (field, obj.messageSubs, out success);  return success;
                case Gen_changeSubs:  obj.changeSubs  = reader.ReadClass   (field, obj.changeSubs,  out success);  return success;
            }
            return false;
        }

        private static void Write(ref SubscriptionEvents obj, PropField[] fields, ref Writer writer, ref bool firstMember) {
            writer.WriteInt32   (fields[Gen_seq],         obj.seq,         ref firstMember);
            writer.WriteInt32   (fields[Gen_queued],      obj.queued,      ref firstMember);
            writer.WriteBoolean (fields[Gen_queueEvents], obj.queueEvents, ref firstMember);
            writer.WriteBoolean (fields[Gen_connected],   obj.connected,   ref firstMember);
            writer.WriteClass   (fields[Gen_messageSubs], obj.messageSubs, ref firstMember);
            writer.WriteClass   (fields[Gen_changeSubs],  obj.changeSubs,  ref firstMember);
        }
    }
}

