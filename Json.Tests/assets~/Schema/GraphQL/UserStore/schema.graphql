# Generated by: https://github.com/friflo/Friflo.Json.Fliox#schema

scalar String

scalar Int

scalar Float

scalar Boolean

scalar Any

type Query {
    queryCredentials(filter: String, limit: Int, maxCount: Int, cursor: String, selectAll: Boolean) : QueryCredentialsResult!
    queryPermissions(filter: String, limit: Int, maxCount: Int, cursor: String, selectAll: Boolean) : QueryPermissionsResult!
    queryRoles      (filter: String, limit: Int, maxCount: Int, cursor: String, selectAll: Boolean) : QueryRolesResult!
    queryTargets    (filter: String, limit: Int, maxCount: Int, cursor: String, selectAll: Boolean) : QueryTargetsResult!
    readCredentials (ids: [String!]!, selectAll: Boolean) : [UserCredential]!
    readPermissions (ids: [String!]!, selectAll: Boolean) : [UserPermission]!
    readRoles       (ids: [String!]!, selectAll: Boolean) : [Role]!
    readTargets     (ids: [String!]!, selectAll: Boolean) : [UserTarget]!
    countCredentials(filter: String) : Int
    countPermissions(filter: String) : Int
    countRoles      (filter: String) : Int
    countTargets    (filter: String) : Int
    AuthenticateUser(param: CredentialsInput) : AuthResult!
    ValidateUserDb   : ValidateUserDbResult!
    ClearAuthCache   : Boolean!
    std_Echo        (param: Any!) : Any!
    std_Containers   : DbContainers!
    std_Messages     : DbMessages!
    std_Schema       : DbSchema!
    std_Stats       (param: String) : DbStats!
    std_Host         : HostInfo!
    std_Cluster      : HostCluster!
    std_User        (param: UserOptionsInput) : UserResult!
}

type QueryCredentialsResult {
    count  : Int!
    cursor : String
    items  : [UserCredential!]!
}

type QueryPermissionsResult {
    count  : Int!
    cursor : String
    items  : [UserPermission!]!
}

type QueryRolesResult {
    count  : Int!
    cursor : String
    items  : [Role!]!
}

type QueryTargetsResult {
    count  : Int!
    cursor : String
    items  : [UserTarget!]!
}

type EntityError {
    id      : String!
    type    : String!
    message : String!
}

type Mutation {
    createCredentials(entities: [UserCredentialInput!]!) : [EntityError!]
    createPermissions(entities: [UserPermissionInput!]!) : [EntityError!]
    createRoles      (entities: [RoleInput!]!) : [EntityError!]
    createTargets    (entities: [UserTargetInput!]!) : [EntityError!]
    upsertCredentials(entities: [UserCredentialInput!]!) : [EntityError!]
    upsertPermissions(entities: [UserPermissionInput!]!) : [EntityError!]
    upsertRoles      (entities: [RoleInput!]!) : [EntityError!]
    upsertTargets    (entities: [UserTargetInput!]!) : [EntityError!]
    deleteCredentials(ids: [String!]!) : [EntityError!]
    deletePermissions(ids: [String!]!) : [EntityError!]
    deleteRoles      (ids: [String!]!) : [EntityError!]
    deleteTargets    (ids: [String!]!) : [EntityError!]
}

type UserStore {
    credentials : Any
    permissions : Any
    roles       : Any
    targets     : Any
}

type UserCredential {
    id    : String!
    token : String
}

input UserCredentialInput {
    id    : String!
    token : String
}

type UserPermission {
    id    : String!
    roles : [String!]
}

input UserPermissionInput {
    id    : String!
    roles : [String!]
}

type Role {
    id          : String!
    rights      : [Right!]!
    description : String
}

input RoleInput {
    id          : String!
    rights      : [RightInput!]!
    description : String
}

type UserTarget {
    id     : String!
    groups : [String!]!
}

input UserTargetInput {
    id     : String!
    groups : [String!]!
}

union Right =
    | AllowRight
    | TaskRight
    | SendMessageRight
    | SubscribeMessageRight
    | OperationRight
    | PredicateRight

scalar RightInput

type AllowRight {
    database    : String!
    description : String
}

input AllowRightInput {
    database    : String!
    description : String
}

type TaskRight {
    database    : String!
    types       : [TaskType!]!
    description : String
}

input TaskRightInput {
    database    : String!
    types       : [TaskType!]!
    description : String
}

enum TaskType {
    read
    query
    create
    upsert
    patch
    delete
    aggregate
    message
    command
    closeCursors
    subscribeChanges
    subscribeMessage
    reserveKeys
    error
}

type SendMessageRight {
    database    : String!
    names       : [String!]!
    description : String
}

input SendMessageRightInput {
    database    : String!
    names       : [String!]!
    description : String
}

type SubscribeMessageRight {
    database    : String!
    names       : [String!]!
    description : String
}

input SubscribeMessageRightInput {
    database    : String!
    names       : [String!]!
    description : String
}

type OperationRight {
    database    : String!
    containers  : [ContainerAccess!]!
    description : String
}

input OperationRightInput {
    database    : String!
    containers  : [ContainerAccessInput!]!
    description : String
}

type ContainerAccess {
    name             : String!
    operations       : [OperationType!]
    subscribeChanges : [Change!]
}

input ContainerAccessInput {
    name             : String!
    operations       : [OperationType!]
    subscribeChanges : [Change!]
}

enum OperationType {
    create
    upsert
    delete
    deleteAll
    patch
    read
    query
    aggregate
    mutate
    full
}

enum Change {
    create
    upsert
    patch
    delete
}

type PredicateRight {
    names       : [String!]!
    description : String
}

input PredicateRightInput {
    names       : [String!]!
    description : String
}

type Credentials {
    userId : String!
    token  : String!
}

input CredentialsInput {
    userId : String!
    token  : String!
}

type AuthResult {
    isValid : Boolean!
}

input AuthResultInput {
    isValid : Boolean!
}

type ValidateUserDbResult {
    errors : [String!]
}

input ValidateUserDbResultInput {
    errors : [String!]
}

type DbContainers {
    id         : String!
    storage    : String!
    containers : [String!]!
}

input DbContainersInput {
    id         : String!
    storage    : String!
    containers : [String!]!
}

type DbMessages {
    id       : String!
    commands : [String!]!
    messages : [String!]!
}

input DbMessagesInput {
    id       : String!
    commands : [String!]!
    messages : [String!]!
}

type DbSchema {
    id          : String!
    schemaName  : String!
    schemaPath  : String!
    jsonSchemas : Any
}

input DbSchemaInput {
    id          : String!
    schemaName  : String!
    schemaPath  : String!
    jsonSchemas : Any
}

type DbStats {
    containers : [ContainerStats!]
}

input DbStatsInput {
    containers : [ContainerStatsInput!]
}

type ContainerStats {
    name  : String!
    count : Int!
}

input ContainerStatsInput {
    name  : String!
    count : Int!
}

type HostInfo {
    hostVersion    : String!
    flioxVersion   : String!
    hostName       : String
    projectName    : String
    projectWebsite : String
    envName        : String
    envColor       : String
    routes         : [String!]!
}

input HostInfoInput {
    hostVersion    : String!
    flioxVersion   : String!
    hostName       : String
    projectName    : String
    projectWebsite : String
    envName        : String
    envColor       : String
    routes         : [String!]!
}

type HostCluster {
    databases : [DbContainers!]!
}

input HostClusterInput {
    databases : [DbContainersInput!]!
}

type UserOptions {
    addGroups    : [String!]
    removeGroups : [String!]
}

input UserOptionsInput {
    addGroups    : [String!]
    removeGroups : [String!]
}

type UserResult {
    groups : [String!]!
}

input UserResultInput {
    groups : [String!]!
}

